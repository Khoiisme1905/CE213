$date
	Wed Jun 04 17:39:36 2025
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module MISP_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 1 # PC [31] $end
$var wire 1 $ PC [30] $end
$var wire 1 % PC [29] $end
$var wire 1 & PC [28] $end
$var wire 1 ' PC [27] $end
$var wire 1 ( PC [26] $end
$var wire 1 ) PC [25] $end
$var wire 1 * PC [24] $end
$var wire 1 + PC [23] $end
$var wire 1 , PC [22] $end
$var wire 1 - PC [21] $end
$var wire 1 . PC [20] $end
$var wire 1 / PC [19] $end
$var wire 1 0 PC [18] $end
$var wire 1 1 PC [17] $end
$var wire 1 2 PC [16] $end
$var wire 1 3 PC [15] $end
$var wire 1 4 PC [14] $end
$var wire 1 5 PC [13] $end
$var wire 1 6 PC [12] $end
$var wire 1 7 PC [11] $end
$var wire 1 8 PC [10] $end
$var wire 1 9 PC [9] $end
$var wire 1 : PC [8] $end
$var wire 1 ; PC [7] $end
$var wire 1 < PC [6] $end
$var wire 1 = PC [5] $end
$var wire 1 > PC [4] $end
$var wire 1 ? PC [3] $end
$var wire 1 @ PC [2] $end
$var wire 1 A PC [1] $end
$var wire 1 B PC [0] $end
$var wire 1 C Instr [31] $end
$var wire 1 D Instr [30] $end
$var wire 1 E Instr [29] $end
$var wire 1 F Instr [28] $end
$var wire 1 G Instr [27] $end
$var wire 1 H Instr [26] $end
$var wire 1 I Instr [25] $end
$var wire 1 J Instr [24] $end
$var wire 1 K Instr [23] $end
$var wire 1 L Instr [22] $end
$var wire 1 M Instr [21] $end
$var wire 1 N Instr [20] $end
$var wire 1 O Instr [19] $end
$var wire 1 P Instr [18] $end
$var wire 1 Q Instr [17] $end
$var wire 1 R Instr [16] $end
$var wire 1 S Instr [15] $end
$var wire 1 T Instr [14] $end
$var wire 1 U Instr [13] $end
$var wire 1 V Instr [12] $end
$var wire 1 W Instr [11] $end
$var wire 1 X Instr [10] $end
$var wire 1 Y Instr [9] $end
$var wire 1 Z Instr [8] $end
$var wire 1 [ Instr [7] $end
$var wire 1 \ Instr [6] $end
$var wire 1 ] Instr [5] $end
$var wire 1 ^ Instr [4] $end
$var wire 1 _ Instr [3] $end
$var wire 1 ` Instr [2] $end
$var wire 1 a Instr [1] $end
$var wire 1 b Instr [0] $end
$var wire 1 c ReadData [31] $end
$var wire 1 d ReadData [30] $end
$var wire 1 e ReadData [29] $end
$var wire 1 f ReadData [28] $end
$var wire 1 g ReadData [27] $end
$var wire 1 h ReadData [26] $end
$var wire 1 i ReadData [25] $end
$var wire 1 j ReadData [24] $end
$var wire 1 k ReadData [23] $end
$var wire 1 l ReadData [22] $end
$var wire 1 m ReadData [21] $end
$var wire 1 n ReadData [20] $end
$var wire 1 o ReadData [19] $end
$var wire 1 p ReadData [18] $end
$var wire 1 q ReadData [17] $end
$var wire 1 r ReadData [16] $end
$var wire 1 s ReadData [15] $end
$var wire 1 t ReadData [14] $end
$var wire 1 u ReadData [13] $end
$var wire 1 v ReadData [12] $end
$var wire 1 w ReadData [11] $end
$var wire 1 x ReadData [10] $end
$var wire 1 y ReadData [9] $end
$var wire 1 z ReadData [8] $end
$var wire 1 { ReadData [7] $end
$var wire 1 | ReadData [6] $end
$var wire 1 } ReadData [5] $end
$var wire 1 ~ ReadData [4] $end
$var wire 1 !! ReadData [3] $end
$var wire 1 "! ReadData [2] $end
$var wire 1 #! ReadData [1] $end
$var wire 1 $! ReadData [0] $end
$var wire 1 %! WriteData [31] $end
$var wire 1 &! WriteData [30] $end
$var wire 1 '! WriteData [29] $end
$var wire 1 (! WriteData [28] $end
$var wire 1 )! WriteData [27] $end
$var wire 1 *! WriteData [26] $end
$var wire 1 +! WriteData [25] $end
$var wire 1 ,! WriteData [24] $end
$var wire 1 -! WriteData [23] $end
$var wire 1 .! WriteData [22] $end
$var wire 1 /! WriteData [21] $end
$var wire 1 0! WriteData [20] $end
$var wire 1 1! WriteData [19] $end
$var wire 1 2! WriteData [18] $end
$var wire 1 3! WriteData [17] $end
$var wire 1 4! WriteData [16] $end
$var wire 1 5! WriteData [15] $end
$var wire 1 6! WriteData [14] $end
$var wire 1 7! WriteData [13] $end
$var wire 1 8! WriteData [12] $end
$var wire 1 9! WriteData [11] $end
$var wire 1 :! WriteData [10] $end
$var wire 1 ;! WriteData [9] $end
$var wire 1 <! WriteData [8] $end
$var wire 1 =! WriteData [7] $end
$var wire 1 >! WriteData [6] $end
$var wire 1 ?! WriteData [5] $end
$var wire 1 @! WriteData [4] $end
$var wire 1 A! WriteData [3] $end
$var wire 1 B! WriteData [2] $end
$var wire 1 C! WriteData [1] $end
$var wire 1 D! WriteData [0] $end
$var wire 1 E! ALUResult [31] $end
$var wire 1 F! ALUResult [30] $end
$var wire 1 G! ALUResult [29] $end
$var wire 1 H! ALUResult [28] $end
$var wire 1 I! ALUResult [27] $end
$var wire 1 J! ALUResult [26] $end
$var wire 1 K! ALUResult [25] $end
$var wire 1 L! ALUResult [24] $end
$var wire 1 M! ALUResult [23] $end
$var wire 1 N! ALUResult [22] $end
$var wire 1 O! ALUResult [21] $end
$var wire 1 P! ALUResult [20] $end
$var wire 1 Q! ALUResult [19] $end
$var wire 1 R! ALUResult [18] $end
$var wire 1 S! ALUResult [17] $end
$var wire 1 T! ALUResult [16] $end
$var wire 1 U! ALUResult [15] $end
$var wire 1 V! ALUResult [14] $end
$var wire 1 W! ALUResult [13] $end
$var wire 1 X! ALUResult [12] $end
$var wire 1 Y! ALUResult [11] $end
$var wire 1 Z! ALUResult [10] $end
$var wire 1 [! ALUResult [9] $end
$var wire 1 \! ALUResult [8] $end
$var wire 1 ]! ALUResult [7] $end
$var wire 1 ^! ALUResult [6] $end
$var wire 1 _! ALUResult [5] $end
$var wire 1 `! ALUResult [4] $end
$var wire 1 a! ALUResult [3] $end
$var wire 1 b! ALUResult [2] $end
$var wire 1 c! ALUResult [1] $end
$var wire 1 d! ALUResult [0] $end
$var wire 1 e! ZeroFlag $end

$scope module uut $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 # PC [31] $end
$var wire 1 $ PC [30] $end
$var wire 1 % PC [29] $end
$var wire 1 & PC [28] $end
$var wire 1 ' PC [27] $end
$var wire 1 ( PC [26] $end
$var wire 1 ) PC [25] $end
$var wire 1 * PC [24] $end
$var wire 1 + PC [23] $end
$var wire 1 , PC [22] $end
$var wire 1 - PC [21] $end
$var wire 1 . PC [20] $end
$var wire 1 / PC [19] $end
$var wire 1 0 PC [18] $end
$var wire 1 1 PC [17] $end
$var wire 1 2 PC [16] $end
$var wire 1 3 PC [15] $end
$var wire 1 4 PC [14] $end
$var wire 1 5 PC [13] $end
$var wire 1 6 PC [12] $end
$var wire 1 7 PC [11] $end
$var wire 1 8 PC [10] $end
$var wire 1 9 PC [9] $end
$var wire 1 : PC [8] $end
$var wire 1 ; PC [7] $end
$var wire 1 < PC [6] $end
$var wire 1 = PC [5] $end
$var wire 1 > PC [4] $end
$var wire 1 ? PC [3] $end
$var wire 1 @ PC [2] $end
$var wire 1 A PC [1] $end
$var wire 1 B PC [0] $end
$var wire 1 C Instr [31] $end
$var wire 1 D Instr [30] $end
$var wire 1 E Instr [29] $end
$var wire 1 F Instr [28] $end
$var wire 1 G Instr [27] $end
$var wire 1 H Instr [26] $end
$var wire 1 I Instr [25] $end
$var wire 1 J Instr [24] $end
$var wire 1 K Instr [23] $end
$var wire 1 L Instr [22] $end
$var wire 1 M Instr [21] $end
$var wire 1 N Instr [20] $end
$var wire 1 O Instr [19] $end
$var wire 1 P Instr [18] $end
$var wire 1 Q Instr [17] $end
$var wire 1 R Instr [16] $end
$var wire 1 S Instr [15] $end
$var wire 1 T Instr [14] $end
$var wire 1 U Instr [13] $end
$var wire 1 V Instr [12] $end
$var wire 1 W Instr [11] $end
$var wire 1 X Instr [10] $end
$var wire 1 Y Instr [9] $end
$var wire 1 Z Instr [8] $end
$var wire 1 [ Instr [7] $end
$var wire 1 \ Instr [6] $end
$var wire 1 ] Instr [5] $end
$var wire 1 ^ Instr [4] $end
$var wire 1 _ Instr [3] $end
$var wire 1 ` Instr [2] $end
$var wire 1 a Instr [1] $end
$var wire 1 b Instr [0] $end
$var wire 1 c ReadData [31] $end
$var wire 1 d ReadData [30] $end
$var wire 1 e ReadData [29] $end
$var wire 1 f ReadData [28] $end
$var wire 1 g ReadData [27] $end
$var wire 1 h ReadData [26] $end
$var wire 1 i ReadData [25] $end
$var wire 1 j ReadData [24] $end
$var wire 1 k ReadData [23] $end
$var wire 1 l ReadData [22] $end
$var wire 1 m ReadData [21] $end
$var wire 1 n ReadData [20] $end
$var wire 1 o ReadData [19] $end
$var wire 1 p ReadData [18] $end
$var wire 1 q ReadData [17] $end
$var wire 1 r ReadData [16] $end
$var wire 1 s ReadData [15] $end
$var wire 1 t ReadData [14] $end
$var wire 1 u ReadData [13] $end
$var wire 1 v ReadData [12] $end
$var wire 1 w ReadData [11] $end
$var wire 1 x ReadData [10] $end
$var wire 1 y ReadData [9] $end
$var wire 1 z ReadData [8] $end
$var wire 1 { ReadData [7] $end
$var wire 1 | ReadData [6] $end
$var wire 1 } ReadData [5] $end
$var wire 1 ~ ReadData [4] $end
$var wire 1 !! ReadData [3] $end
$var wire 1 "! ReadData [2] $end
$var wire 1 #! ReadData [1] $end
$var wire 1 $! ReadData [0] $end
$var wire 1 %! WriteData [31] $end
$var wire 1 &! WriteData [30] $end
$var wire 1 '! WriteData [29] $end
$var wire 1 (! WriteData [28] $end
$var wire 1 )! WriteData [27] $end
$var wire 1 *! WriteData [26] $end
$var wire 1 +! WriteData [25] $end
$var wire 1 ,! WriteData [24] $end
$var wire 1 -! WriteData [23] $end
$var wire 1 .! WriteData [22] $end
$var wire 1 /! WriteData [21] $end
$var wire 1 0! WriteData [20] $end
$var wire 1 1! WriteData [19] $end
$var wire 1 2! WriteData [18] $end
$var wire 1 3! WriteData [17] $end
$var wire 1 4! WriteData [16] $end
$var wire 1 5! WriteData [15] $end
$var wire 1 6! WriteData [14] $end
$var wire 1 7! WriteData [13] $end
$var wire 1 8! WriteData [12] $end
$var wire 1 9! WriteData [11] $end
$var wire 1 :! WriteData [10] $end
$var wire 1 ;! WriteData [9] $end
$var wire 1 <! WriteData [8] $end
$var wire 1 =! WriteData [7] $end
$var wire 1 >! WriteData [6] $end
$var wire 1 ?! WriteData [5] $end
$var wire 1 @! WriteData [4] $end
$var wire 1 A! WriteData [3] $end
$var wire 1 B! WriteData [2] $end
$var wire 1 C! WriteData [1] $end
$var wire 1 D! WriteData [0] $end
$var wire 1 E! ALUResult [31] $end
$var wire 1 F! ALUResult [30] $end
$var wire 1 G! ALUResult [29] $end
$var wire 1 H! ALUResult [28] $end
$var wire 1 I! ALUResult [27] $end
$var wire 1 J! ALUResult [26] $end
$var wire 1 K! ALUResult [25] $end
$var wire 1 L! ALUResult [24] $end
$var wire 1 M! ALUResult [23] $end
$var wire 1 N! ALUResult [22] $end
$var wire 1 O! ALUResult [21] $end
$var wire 1 P! ALUResult [20] $end
$var wire 1 Q! ALUResult [19] $end
$var wire 1 R! ALUResult [18] $end
$var wire 1 S! ALUResult [17] $end
$var wire 1 T! ALUResult [16] $end
$var wire 1 U! ALUResult [15] $end
$var wire 1 V! ALUResult [14] $end
$var wire 1 W! ALUResult [13] $end
$var wire 1 X! ALUResult [12] $end
$var wire 1 Y! ALUResult [11] $end
$var wire 1 Z! ALUResult [10] $end
$var wire 1 [! ALUResult [9] $end
$var wire 1 \! ALUResult [8] $end
$var wire 1 ]! ALUResult [7] $end
$var wire 1 ^! ALUResult [6] $end
$var wire 1 _! ALUResult [5] $end
$var wire 1 `! ALUResult [4] $end
$var wire 1 a! ALUResult [3] $end
$var wire 1 b! ALUResult [2] $end
$var wire 1 c! ALUResult [1] $end
$var wire 1 d! ALUResult [0] $end
$var wire 1 e! ZeroFlag $end
$var wire 1 h! RegDst $end
$var wire 1 i! RegWrite $end
$var wire 1 j! ALUSrc $end
$var wire 1 k! Jump $end
$var wire 1 l! MemtoReg $end
$var wire 1 m! PCSrc $end
$var wire 1 n! MemRead $end
$var wire 1 o! MemWrite $end
$var wire 1 p! ALUControl [3] $end
$var wire 1 q! ALUControl [2] $end
$var wire 1 r! ALUControl [1] $end
$var wire 1 s! ALUControl [0] $end
$var wire 1 t! MemAddr [31] $end
$var wire 1 u! MemAddr [30] $end
$var wire 1 v! MemAddr [29] $end
$var wire 1 w! MemAddr [28] $end
$var wire 1 x! MemAddr [27] $end
$var wire 1 y! MemAddr [26] $end
$var wire 1 z! MemAddr [25] $end
$var wire 1 {! MemAddr [24] $end
$var wire 1 |! MemAddr [23] $end
$var wire 1 }! MemAddr [22] $end
$var wire 1 ~! MemAddr [21] $end
$var wire 1 !" MemAddr [20] $end
$var wire 1 "" MemAddr [19] $end
$var wire 1 #" MemAddr [18] $end
$var wire 1 $" MemAddr [17] $end
$var wire 1 %" MemAddr [16] $end
$var wire 1 &" MemAddr [15] $end
$var wire 1 '" MemAddr [14] $end
$var wire 1 (" MemAddr [13] $end
$var wire 1 )" MemAddr [12] $end
$var wire 1 *" MemAddr [11] $end
$var wire 1 +" MemAddr [10] $end
$var wire 1 ," MemAddr [9] $end
$var wire 1 -" MemAddr [8] $end
$var wire 1 ." MemAddr [7] $end
$var wire 1 /" MemAddr [6] $end
$var wire 1 0" MemAddr [5] $end
$var wire 1 1" MemAddr [4] $end
$var wire 1 2" MemAddr [3] $end
$var wire 1 3" MemAddr [2] $end
$var wire 1 4" MemAddr [1] $end
$var wire 1 5" MemAddr [0] $end
$var wire 1 6" SEL_I [3] $end
$var wire 1 7" SEL_I [2] $end
$var wire 1 8" SEL_I [1] $end
$var wire 1 9" SEL_I [0] $end
$var wire 1 :" STB_I $end
$var wire 1 ;" CYC_I $end
$var wire 1 <" ACK_O $end

$scope module control_unit $end
$var wire 1 C Opcode [5] $end
$var wire 1 D Opcode [4] $end
$var wire 1 E Opcode [3] $end
$var wire 1 F Opcode [2] $end
$var wire 1 G Opcode [1] $end
$var wire 1 H Opcode [0] $end
$var wire 1 ] Func [5] $end
$var wire 1 ^ Func [4] $end
$var wire 1 _ Func [3] $end
$var wire 1 ` Func [2] $end
$var wire 1 a Func [1] $end
$var wire 1 b Func [0] $end
$var wire 1 e! Zero $end
$var reg 1 =" MemtoReg $end
$var reg 1 >" ALUSrc $end
$var reg 1 ?" RegDst $end
$var reg 1 @" RegWrite $end
$var reg 1 A" Jump $end
$var wire 1 m! PCSrc $end
$var reg 4 B" ALUControl [3:0] $end
$var reg 8 C" temp [7:0] $end
$var reg 1 D" Branch $end
$var reg 1 E" MemWrite $end
$upscope $end

$scope module datapath $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 h! RegDst $end
$var wire 1 i! RegWrite $end
$var wire 1 j! ALUSrc $end
$var wire 1 k! Jump $end
$var wire 1 l! MemtoReg $end
$var wire 1 m! PCSrc $end
$var wire 1 p! ALUControl [3] $end
$var wire 1 q! ALUControl [2] $end
$var wire 1 r! ALUControl [1] $end
$var wire 1 s! ALUControl [0] $end
$var wire 1 t! MemAddr [31] $end
$var wire 1 u! MemAddr [30] $end
$var wire 1 v! MemAddr [29] $end
$var wire 1 w! MemAddr [28] $end
$var wire 1 x! MemAddr [27] $end
$var wire 1 y! MemAddr [26] $end
$var wire 1 z! MemAddr [25] $end
$var wire 1 {! MemAddr [24] $end
$var wire 1 |! MemAddr [23] $end
$var wire 1 }! MemAddr [22] $end
$var wire 1 ~! MemAddr [21] $end
$var wire 1 !" MemAddr [20] $end
$var wire 1 "" MemAddr [19] $end
$var wire 1 #" MemAddr [18] $end
$var wire 1 $" MemAddr [17] $end
$var wire 1 %" MemAddr [16] $end
$var wire 1 &" MemAddr [15] $end
$var wire 1 '" MemAddr [14] $end
$var wire 1 (" MemAddr [13] $end
$var wire 1 )" MemAddr [12] $end
$var wire 1 *" MemAddr [11] $end
$var wire 1 +" MemAddr [10] $end
$var wire 1 ," MemAddr [9] $end
$var wire 1 -" MemAddr [8] $end
$var wire 1 ." MemAddr [7] $end
$var wire 1 /" MemAddr [6] $end
$var wire 1 0" MemAddr [5] $end
$var wire 1 1" MemAddr [4] $end
$var wire 1 2" MemAddr [3] $end
$var wire 1 3" MemAddr [2] $end
$var wire 1 4" MemAddr [1] $end
$var wire 1 5" MemAddr [0] $end
$var wire 1 %! WriteData [31] $end
$var wire 1 &! WriteData [30] $end
$var wire 1 '! WriteData [29] $end
$var wire 1 (! WriteData [28] $end
$var wire 1 )! WriteData [27] $end
$var wire 1 *! WriteData [26] $end
$var wire 1 +! WriteData [25] $end
$var wire 1 ,! WriteData [24] $end
$var wire 1 -! WriteData [23] $end
$var wire 1 .! WriteData [22] $end
$var wire 1 /! WriteData [21] $end
$var wire 1 0! WriteData [20] $end
$var wire 1 1! WriteData [19] $end
$var wire 1 2! WriteData [18] $end
$var wire 1 3! WriteData [17] $end
$var wire 1 4! WriteData [16] $end
$var wire 1 5! WriteData [15] $end
$var wire 1 6! WriteData [14] $end
$var wire 1 7! WriteData [13] $end
$var wire 1 8! WriteData [12] $end
$var wire 1 9! WriteData [11] $end
$var wire 1 :! WriteData [10] $end
$var wire 1 ;! WriteData [9] $end
$var wire 1 <! WriteData [8] $end
$var wire 1 =! WriteData [7] $end
$var wire 1 >! WriteData [6] $end
$var wire 1 ?! WriteData [5] $end
$var wire 1 @! WriteData [4] $end
$var wire 1 A! WriteData [3] $end
$var wire 1 B! WriteData [2] $end
$var wire 1 C! WriteData [1] $end
$var wire 1 D! WriteData [0] $end
$var wire 1 n! MemRead $end
$var wire 1 o! MemWrite $end
$var wire 1 C Instr [31] $end
$var wire 1 D Instr [30] $end
$var wire 1 E Instr [29] $end
$var wire 1 F Instr [28] $end
$var wire 1 G Instr [27] $end
$var wire 1 H Instr [26] $end
$var wire 1 I Instr [25] $end
$var wire 1 J Instr [24] $end
$var wire 1 K Instr [23] $end
$var wire 1 L Instr [22] $end
$var wire 1 M Instr [21] $end
$var wire 1 N Instr [20] $end
$var wire 1 O Instr [19] $end
$var wire 1 P Instr [18] $end
$var wire 1 Q Instr [17] $end
$var wire 1 R Instr [16] $end
$var wire 1 S Instr [15] $end
$var wire 1 T Instr [14] $end
$var wire 1 U Instr [13] $end
$var wire 1 V Instr [12] $end
$var wire 1 W Instr [11] $end
$var wire 1 X Instr [10] $end
$var wire 1 Y Instr [9] $end
$var wire 1 Z Instr [8] $end
$var wire 1 [ Instr [7] $end
$var wire 1 \ Instr [6] $end
$var wire 1 ] Instr [5] $end
$var wire 1 ^ Instr [4] $end
$var wire 1 _ Instr [3] $end
$var wire 1 ` Instr [2] $end
$var wire 1 a Instr [1] $end
$var wire 1 b Instr [0] $end
$var wire 1 # PC [31] $end
$var wire 1 $ PC [30] $end
$var wire 1 % PC [29] $end
$var wire 1 & PC [28] $end
$var wire 1 ' PC [27] $end
$var wire 1 ( PC [26] $end
$var wire 1 ) PC [25] $end
$var wire 1 * PC [24] $end
$var wire 1 + PC [23] $end
$var wire 1 , PC [22] $end
$var wire 1 - PC [21] $end
$var wire 1 . PC [20] $end
$var wire 1 / PC [19] $end
$var wire 1 0 PC [18] $end
$var wire 1 1 PC [17] $end
$var wire 1 2 PC [16] $end
$var wire 1 3 PC [15] $end
$var wire 1 4 PC [14] $end
$var wire 1 5 PC [13] $end
$var wire 1 6 PC [12] $end
$var wire 1 7 PC [11] $end
$var wire 1 8 PC [10] $end
$var wire 1 9 PC [9] $end
$var wire 1 : PC [8] $end
$var wire 1 ; PC [7] $end
$var wire 1 < PC [6] $end
$var wire 1 = PC [5] $end
$var wire 1 > PC [4] $end
$var wire 1 ? PC [3] $end
$var wire 1 @ PC [2] $end
$var wire 1 A PC [1] $end
$var wire 1 B PC [0] $end
$var wire 1 e! ZeroFlag $end
$var wire 1 E! ALUResult [31] $end
$var wire 1 F! ALUResult [30] $end
$var wire 1 G! ALUResult [29] $end
$var wire 1 H! ALUResult [28] $end
$var wire 1 I! ALUResult [27] $end
$var wire 1 J! ALUResult [26] $end
$var wire 1 K! ALUResult [25] $end
$var wire 1 L! ALUResult [24] $end
$var wire 1 M! ALUResult [23] $end
$var wire 1 N! ALUResult [22] $end
$var wire 1 O! ALUResult [21] $end
$var wire 1 P! ALUResult [20] $end
$var wire 1 Q! ALUResult [19] $end
$var wire 1 R! ALUResult [18] $end
$var wire 1 S! ALUResult [17] $end
$var wire 1 T! ALUResult [16] $end
$var wire 1 U! ALUResult [15] $end
$var wire 1 V! ALUResult [14] $end
$var wire 1 W! ALUResult [13] $end
$var wire 1 X! ALUResult [12] $end
$var wire 1 Y! ALUResult [11] $end
$var wire 1 Z! ALUResult [10] $end
$var wire 1 [! ALUResult [9] $end
$var wire 1 \! ALUResult [8] $end
$var wire 1 ]! ALUResult [7] $end
$var wire 1 ^! ALUResult [6] $end
$var wire 1 _! ALUResult [5] $end
$var wire 1 `! ALUResult [4] $end
$var wire 1 a! ALUResult [3] $end
$var wire 1 b! ALUResult [2] $end
$var wire 1 c! ALUResult [1] $end
$var wire 1 d! ALUResult [0] $end
$var wire 1 c ReadData [31] $end
$var wire 1 d ReadData [30] $end
$var wire 1 e ReadData [29] $end
$var wire 1 f ReadData [28] $end
$var wire 1 g ReadData [27] $end
$var wire 1 h ReadData [26] $end
$var wire 1 i ReadData [25] $end
$var wire 1 j ReadData [24] $end
$var wire 1 k ReadData [23] $end
$var wire 1 l ReadData [22] $end
$var wire 1 m ReadData [21] $end
$var wire 1 n ReadData [20] $end
$var wire 1 o ReadData [19] $end
$var wire 1 p ReadData [18] $end
$var wire 1 q ReadData [17] $end
$var wire 1 r ReadData [16] $end
$var wire 1 s ReadData [15] $end
$var wire 1 t ReadData [14] $end
$var wire 1 u ReadData [13] $end
$var wire 1 v ReadData [12] $end
$var wire 1 w ReadData [11] $end
$var wire 1 x ReadData [10] $end
$var wire 1 y ReadData [9] $end
$var wire 1 z ReadData [8] $end
$var wire 1 { ReadData [7] $end
$var wire 1 | ReadData [6] $end
$var wire 1 } ReadData [5] $end
$var wire 1 ~ ReadData [4] $end
$var wire 1 !! ReadData [3] $end
$var wire 1 "! ReadData [2] $end
$var wire 1 #! ReadData [1] $end
$var wire 1 $! ReadData [0] $end
$var wire 1 F" PC_IF [31] $end
$var wire 1 G" PC_IF [30] $end
$var wire 1 H" PC_IF [29] $end
$var wire 1 I" PC_IF [28] $end
$var wire 1 J" PC_IF [27] $end
$var wire 1 K" PC_IF [26] $end
$var wire 1 L" PC_IF [25] $end
$var wire 1 M" PC_IF [24] $end
$var wire 1 N" PC_IF [23] $end
$var wire 1 O" PC_IF [22] $end
$var wire 1 P" PC_IF [21] $end
$var wire 1 Q" PC_IF [20] $end
$var wire 1 R" PC_IF [19] $end
$var wire 1 S" PC_IF [18] $end
$var wire 1 T" PC_IF [17] $end
$var wire 1 U" PC_IF [16] $end
$var wire 1 V" PC_IF [15] $end
$var wire 1 W" PC_IF [14] $end
$var wire 1 X" PC_IF [13] $end
$var wire 1 Y" PC_IF [12] $end
$var wire 1 Z" PC_IF [11] $end
$var wire 1 [" PC_IF [10] $end
$var wire 1 \" PC_IF [9] $end
$var wire 1 ]" PC_IF [8] $end
$var wire 1 ^" PC_IF [7] $end
$var wire 1 _" PC_IF [6] $end
$var wire 1 `" PC_IF [5] $end
$var wire 1 a" PC_IF [4] $end
$var wire 1 b" PC_IF [3] $end
$var wire 1 c" PC_IF [2] $end
$var wire 1 d" PC_IF [1] $end
$var wire 1 e" PC_IF [0] $end
$var wire 1 f" PCNext_IF [31] $end
$var wire 1 g" PCNext_IF [30] $end
$var wire 1 h" PCNext_IF [29] $end
$var wire 1 i" PCNext_IF [28] $end
$var wire 1 j" PCNext_IF [27] $end
$var wire 1 k" PCNext_IF [26] $end
$var wire 1 l" PCNext_IF [25] $end
$var wire 1 m" PCNext_IF [24] $end
$var wire 1 n" PCNext_IF [23] $end
$var wire 1 o" PCNext_IF [22] $end
$var wire 1 p" PCNext_IF [21] $end
$var wire 1 q" PCNext_IF [20] $end
$var wire 1 r" PCNext_IF [19] $end
$var wire 1 s" PCNext_IF [18] $end
$var wire 1 t" PCNext_IF [17] $end
$var wire 1 u" PCNext_IF [16] $end
$var wire 1 v" PCNext_IF [15] $end
$var wire 1 w" PCNext_IF [14] $end
$var wire 1 x" PCNext_IF [13] $end
$var wire 1 y" PCNext_IF [12] $end
$var wire 1 z" PCNext_IF [11] $end
$var wire 1 {" PCNext_IF [10] $end
$var wire 1 |" PCNext_IF [9] $end
$var wire 1 }" PCNext_IF [8] $end
$var wire 1 ~" PCNext_IF [7] $end
$var wire 1 !# PCNext_IF [6] $end
$var wire 1 "# PCNext_IF [5] $end
$var wire 1 ## PCNext_IF [4] $end
$var wire 1 $# PCNext_IF [3] $end
$var wire 1 %# PCNext_IF [2] $end
$var wire 1 &# PCNext_IF [1] $end
$var wire 1 '# PCNext_IF [0] $end
$var wire 1 (# PCPlus4_IF [31] $end
$var wire 1 )# PCPlus4_IF [30] $end
$var wire 1 *# PCPlus4_IF [29] $end
$var wire 1 +# PCPlus4_IF [28] $end
$var wire 1 ,# PCPlus4_IF [27] $end
$var wire 1 -# PCPlus4_IF [26] $end
$var wire 1 .# PCPlus4_IF [25] $end
$var wire 1 /# PCPlus4_IF [24] $end
$var wire 1 0# PCPlus4_IF [23] $end
$var wire 1 1# PCPlus4_IF [22] $end
$var wire 1 2# PCPlus4_IF [21] $end
$var wire 1 3# PCPlus4_IF [20] $end
$var wire 1 4# PCPlus4_IF [19] $end
$var wire 1 5# PCPlus4_IF [18] $end
$var wire 1 6# PCPlus4_IF [17] $end
$var wire 1 7# PCPlus4_IF [16] $end
$var wire 1 8# PCPlus4_IF [15] $end
$var wire 1 9# PCPlus4_IF [14] $end
$var wire 1 :# PCPlus4_IF [13] $end
$var wire 1 ;# PCPlus4_IF [12] $end
$var wire 1 <# PCPlus4_IF [11] $end
$var wire 1 =# PCPlus4_IF [10] $end
$var wire 1 ># PCPlus4_IF [9] $end
$var wire 1 ?# PCPlus4_IF [8] $end
$var wire 1 @# PCPlus4_IF [7] $end
$var wire 1 A# PCPlus4_IF [6] $end
$var wire 1 B# PCPlus4_IF [5] $end
$var wire 1 C# PCPlus4_IF [4] $end
$var wire 1 D# PCPlus4_IF [3] $end
$var wire 1 E# PCPlus4_IF [2] $end
$var wire 1 F# PCPlus4_IF [1] $end
$var wire 1 G# PCPlus4_IF [0] $end
$var wire 1 H# Instr_IF [31] $end
$var wire 1 I# Instr_IF [30] $end
$var wire 1 J# Instr_IF [29] $end
$var wire 1 K# Instr_IF [28] $end
$var wire 1 L# Instr_IF [27] $end
$var wire 1 M# Instr_IF [26] $end
$var wire 1 N# Instr_IF [25] $end
$var wire 1 O# Instr_IF [24] $end
$var wire 1 P# Instr_IF [23] $end
$var wire 1 Q# Instr_IF [22] $end
$var wire 1 R# Instr_IF [21] $end
$var wire 1 S# Instr_IF [20] $end
$var wire 1 T# Instr_IF [19] $end
$var wire 1 U# Instr_IF [18] $end
$var wire 1 V# Instr_IF [17] $end
$var wire 1 W# Instr_IF [16] $end
$var wire 1 X# Instr_IF [15] $end
$var wire 1 Y# Instr_IF [14] $end
$var wire 1 Z# Instr_IF [13] $end
$var wire 1 [# Instr_IF [12] $end
$var wire 1 \# Instr_IF [11] $end
$var wire 1 ]# Instr_IF [10] $end
$var wire 1 ^# Instr_IF [9] $end
$var wire 1 _# Instr_IF [8] $end
$var wire 1 `# Instr_IF [7] $end
$var wire 1 a# Instr_IF [6] $end
$var wire 1 b# Instr_IF [5] $end
$var wire 1 c# Instr_IF [4] $end
$var wire 1 d# Instr_IF [3] $end
$var wire 1 e# Instr_IF [2] $end
$var wire 1 f# Instr_IF [1] $end
$var wire 1 g# Instr_IF [0] $end
$var wire 1 h# PCWrite $end
$var wire 1 i# IF_IDWrite $end
$var wire 1 j# PC_ID [31] $end
$var wire 1 k# PC_ID [30] $end
$var wire 1 l# PC_ID [29] $end
$var wire 1 m# PC_ID [28] $end
$var wire 1 n# PC_ID [27] $end
$var wire 1 o# PC_ID [26] $end
$var wire 1 p# PC_ID [25] $end
$var wire 1 q# PC_ID [24] $end
$var wire 1 r# PC_ID [23] $end
$var wire 1 s# PC_ID [22] $end
$var wire 1 t# PC_ID [21] $end
$var wire 1 u# PC_ID [20] $end
$var wire 1 v# PC_ID [19] $end
$var wire 1 w# PC_ID [18] $end
$var wire 1 x# PC_ID [17] $end
$var wire 1 y# PC_ID [16] $end
$var wire 1 z# PC_ID [15] $end
$var wire 1 {# PC_ID [14] $end
$var wire 1 |# PC_ID [13] $end
$var wire 1 }# PC_ID [12] $end
$var wire 1 ~# PC_ID [11] $end
$var wire 1 !$ PC_ID [10] $end
$var wire 1 "$ PC_ID [9] $end
$var wire 1 #$ PC_ID [8] $end
$var wire 1 $$ PC_ID [7] $end
$var wire 1 %$ PC_ID [6] $end
$var wire 1 &$ PC_ID [5] $end
$var wire 1 '$ PC_ID [4] $end
$var wire 1 ($ PC_ID [3] $end
$var wire 1 )$ PC_ID [2] $end
$var wire 1 *$ PC_ID [1] $end
$var wire 1 +$ PC_ID [0] $end
$var wire 1 ,$ Instr_ID [31] $end
$var wire 1 -$ Instr_ID [30] $end
$var wire 1 .$ Instr_ID [29] $end
$var wire 1 /$ Instr_ID [28] $end
$var wire 1 0$ Instr_ID [27] $end
$var wire 1 1$ Instr_ID [26] $end
$var wire 1 2$ Instr_ID [25] $end
$var wire 1 3$ Instr_ID [24] $end
$var wire 1 4$ Instr_ID [23] $end
$var wire 1 5$ Instr_ID [22] $end
$var wire 1 6$ Instr_ID [21] $end
$var wire 1 7$ Instr_ID [20] $end
$var wire 1 8$ Instr_ID [19] $end
$var wire 1 9$ Instr_ID [18] $end
$var wire 1 :$ Instr_ID [17] $end
$var wire 1 ;$ Instr_ID [16] $end
$var wire 1 <$ Instr_ID [15] $end
$var wire 1 =$ Instr_ID [14] $end
$var wire 1 >$ Instr_ID [13] $end
$var wire 1 ?$ Instr_ID [12] $end
$var wire 1 @$ Instr_ID [11] $end
$var wire 1 A$ Instr_ID [10] $end
$var wire 1 B$ Instr_ID [9] $end
$var wire 1 C$ Instr_ID [8] $end
$var wire 1 D$ Instr_ID [7] $end
$var wire 1 E$ Instr_ID [6] $end
$var wire 1 F$ Instr_ID [5] $end
$var wire 1 G$ Instr_ID [4] $end
$var wire 1 H$ Instr_ID [3] $end
$var wire 1 I$ Instr_ID [2] $end
$var wire 1 J$ Instr_ID [1] $end
$var wire 1 K$ Instr_ID [0] $end
$var wire 1 L$ ReadData1_ID [31] $end
$var wire 1 M$ ReadData1_ID [30] $end
$var wire 1 N$ ReadData1_ID [29] $end
$var wire 1 O$ ReadData1_ID [28] $end
$var wire 1 P$ ReadData1_ID [27] $end
$var wire 1 Q$ ReadData1_ID [26] $end
$var wire 1 R$ ReadData1_ID [25] $end
$var wire 1 S$ ReadData1_ID [24] $end
$var wire 1 T$ ReadData1_ID [23] $end
$var wire 1 U$ ReadData1_ID [22] $end
$var wire 1 V$ ReadData1_ID [21] $end
$var wire 1 W$ ReadData1_ID [20] $end
$var wire 1 X$ ReadData1_ID [19] $end
$var wire 1 Y$ ReadData1_ID [18] $end
$var wire 1 Z$ ReadData1_ID [17] $end
$var wire 1 [$ ReadData1_ID [16] $end
$var wire 1 \$ ReadData1_ID [15] $end
$var wire 1 ]$ ReadData1_ID [14] $end
$var wire 1 ^$ ReadData1_ID [13] $end
$var wire 1 _$ ReadData1_ID [12] $end
$var wire 1 `$ ReadData1_ID [11] $end
$var wire 1 a$ ReadData1_ID [10] $end
$var wire 1 b$ ReadData1_ID [9] $end
$var wire 1 c$ ReadData1_ID [8] $end
$var wire 1 d$ ReadData1_ID [7] $end
$var wire 1 e$ ReadData1_ID [6] $end
$var wire 1 f$ ReadData1_ID [5] $end
$var wire 1 g$ ReadData1_ID [4] $end
$var wire 1 h$ ReadData1_ID [3] $end
$var wire 1 i$ ReadData1_ID [2] $end
$var wire 1 j$ ReadData1_ID [1] $end
$var wire 1 k$ ReadData1_ID [0] $end
$var wire 1 l$ ReadData2_ID [31] $end
$var wire 1 m$ ReadData2_ID [30] $end
$var wire 1 n$ ReadData2_ID [29] $end
$var wire 1 o$ ReadData2_ID [28] $end
$var wire 1 p$ ReadData2_ID [27] $end
$var wire 1 q$ ReadData2_ID [26] $end
$var wire 1 r$ ReadData2_ID [25] $end
$var wire 1 s$ ReadData2_ID [24] $end
$var wire 1 t$ ReadData2_ID [23] $end
$var wire 1 u$ ReadData2_ID [22] $end
$var wire 1 v$ ReadData2_ID [21] $end
$var wire 1 w$ ReadData2_ID [20] $end
$var wire 1 x$ ReadData2_ID [19] $end
$var wire 1 y$ ReadData2_ID [18] $end
$var wire 1 z$ ReadData2_ID [17] $end
$var wire 1 {$ ReadData2_ID [16] $end
$var wire 1 |$ ReadData2_ID [15] $end
$var wire 1 }$ ReadData2_ID [14] $end
$var wire 1 ~$ ReadData2_ID [13] $end
$var wire 1 !% ReadData2_ID [12] $end
$var wire 1 "% ReadData2_ID [11] $end
$var wire 1 #% ReadData2_ID [10] $end
$var wire 1 $% ReadData2_ID [9] $end
$var wire 1 %% ReadData2_ID [8] $end
$var wire 1 &% ReadData2_ID [7] $end
$var wire 1 '% ReadData2_ID [6] $end
$var wire 1 (% ReadData2_ID [5] $end
$var wire 1 )% ReadData2_ID [4] $end
$var wire 1 *% ReadData2_ID [3] $end
$var wire 1 +% ReadData2_ID [2] $end
$var wire 1 ,% ReadData2_ID [1] $end
$var wire 1 -% ReadData2_ID [0] $end
$var wire 1 .% SignImm_ID [31] $end
$var wire 1 /% SignImm_ID [30] $end
$var wire 1 0% SignImm_ID [29] $end
$var wire 1 1% SignImm_ID [28] $end
$var wire 1 2% SignImm_ID [27] $end
$var wire 1 3% SignImm_ID [26] $end
$var wire 1 4% SignImm_ID [25] $end
$var wire 1 5% SignImm_ID [24] $end
$var wire 1 6% SignImm_ID [23] $end
$var wire 1 7% SignImm_ID [22] $end
$var wire 1 8% SignImm_ID [21] $end
$var wire 1 9% SignImm_ID [20] $end
$var wire 1 :% SignImm_ID [19] $end
$var wire 1 ;% SignImm_ID [18] $end
$var wire 1 <% SignImm_ID [17] $end
$var wire 1 =% SignImm_ID [16] $end
$var wire 1 >% SignImm_ID [15] $end
$var wire 1 ?% SignImm_ID [14] $end
$var wire 1 @% SignImm_ID [13] $end
$var wire 1 A% SignImm_ID [12] $end
$var wire 1 B% SignImm_ID [11] $end
$var wire 1 C% SignImm_ID [10] $end
$var wire 1 D% SignImm_ID [9] $end
$var wire 1 E% SignImm_ID [8] $end
$var wire 1 F% SignImm_ID [7] $end
$var wire 1 G% SignImm_ID [6] $end
$var wire 1 H% SignImm_ID [5] $end
$var wire 1 I% SignImm_ID [4] $end
$var wire 1 J% SignImm_ID [3] $end
$var wire 1 K% SignImm_ID [2] $end
$var wire 1 L% SignImm_ID [1] $end
$var wire 1 M% SignImm_ID [0] $end
$var wire 1 N% Rs_ID [4] $end
$var wire 1 O% Rs_ID [3] $end
$var wire 1 P% Rs_ID [2] $end
$var wire 1 Q% Rs_ID [1] $end
$var wire 1 R% Rs_ID [0] $end
$var wire 1 S% Rt_ID [4] $end
$var wire 1 T% Rt_ID [3] $end
$var wire 1 U% Rt_ID [2] $end
$var wire 1 V% Rt_ID [1] $end
$var wire 1 W% Rt_ID [0] $end
$var wire 1 X% Rd_ID [4] $end
$var wire 1 Y% Rd_ID [3] $end
$var wire 1 Z% Rd_ID [2] $end
$var wire 1 [% Rd_ID [1] $end
$var wire 1 \% Rd_ID [0] $end
$var wire 1 ]% RegWrite_ID $end
$var wire 1 ^% MemtoReg_ID $end
$var wire 1 _% MemWrite_ID $end
$var wire 1 `% ALUSrc_ID $end
$var wire 1 a% RegDst_ID $end
$var wire 1 b% Branch_ID $end
$var wire 1 c% Jump_ID $end
$var wire 1 d% ALUControl_ID [3] $end
$var wire 1 e% ALUControl_ID [2] $end
$var wire 1 f% ALUControl_ID [1] $end
$var wire 1 g% ALUControl_ID [0] $end
$var wire 1 h% Stall $end
$var wire 1 i% ID_EXFlush $end
$var wire 1 j% PC_EX [31] $end
$var wire 1 k% PC_EX [30] $end
$var wire 1 l% PC_EX [29] $end
$var wire 1 m% PC_EX [28] $end
$var wire 1 n% PC_EX [27] $end
$var wire 1 o% PC_EX [26] $end
$var wire 1 p% PC_EX [25] $end
$var wire 1 q% PC_EX [24] $end
$var wire 1 r% PC_EX [23] $end
$var wire 1 s% PC_EX [22] $end
$var wire 1 t% PC_EX [21] $end
$var wire 1 u% PC_EX [20] $end
$var wire 1 v% PC_EX [19] $end
$var wire 1 w% PC_EX [18] $end
$var wire 1 x% PC_EX [17] $end
$var wire 1 y% PC_EX [16] $end
$var wire 1 z% PC_EX [15] $end
$var wire 1 {% PC_EX [14] $end
$var wire 1 |% PC_EX [13] $end
$var wire 1 }% PC_EX [12] $end
$var wire 1 ~% PC_EX [11] $end
$var wire 1 !& PC_EX [10] $end
$var wire 1 "& PC_EX [9] $end
$var wire 1 #& PC_EX [8] $end
$var wire 1 $& PC_EX [7] $end
$var wire 1 %& PC_EX [6] $end
$var wire 1 && PC_EX [5] $end
$var wire 1 '& PC_EX [4] $end
$var wire 1 (& PC_EX [3] $end
$var wire 1 )& PC_EX [2] $end
$var wire 1 *& PC_EX [1] $end
$var wire 1 +& PC_EX [0] $end
$var wire 1 ,& ReadData1_EX [31] $end
$var wire 1 -& ReadData1_EX [30] $end
$var wire 1 .& ReadData1_EX [29] $end
$var wire 1 /& ReadData1_EX [28] $end
$var wire 1 0& ReadData1_EX [27] $end
$var wire 1 1& ReadData1_EX [26] $end
$var wire 1 2& ReadData1_EX [25] $end
$var wire 1 3& ReadData1_EX [24] $end
$var wire 1 4& ReadData1_EX [23] $end
$var wire 1 5& ReadData1_EX [22] $end
$var wire 1 6& ReadData1_EX [21] $end
$var wire 1 7& ReadData1_EX [20] $end
$var wire 1 8& ReadData1_EX [19] $end
$var wire 1 9& ReadData1_EX [18] $end
$var wire 1 :& ReadData1_EX [17] $end
$var wire 1 ;& ReadData1_EX [16] $end
$var wire 1 <& ReadData1_EX [15] $end
$var wire 1 =& ReadData1_EX [14] $end
$var wire 1 >& ReadData1_EX [13] $end
$var wire 1 ?& ReadData1_EX [12] $end
$var wire 1 @& ReadData1_EX [11] $end
$var wire 1 A& ReadData1_EX [10] $end
$var wire 1 B& ReadData1_EX [9] $end
$var wire 1 C& ReadData1_EX [8] $end
$var wire 1 D& ReadData1_EX [7] $end
$var wire 1 E& ReadData1_EX [6] $end
$var wire 1 F& ReadData1_EX [5] $end
$var wire 1 G& ReadData1_EX [4] $end
$var wire 1 H& ReadData1_EX [3] $end
$var wire 1 I& ReadData1_EX [2] $end
$var wire 1 J& ReadData1_EX [1] $end
$var wire 1 K& ReadData1_EX [0] $end
$var wire 1 L& ReadData2_EX [31] $end
$var wire 1 M& ReadData2_EX [30] $end
$var wire 1 N& ReadData2_EX [29] $end
$var wire 1 O& ReadData2_EX [28] $end
$var wire 1 P& ReadData2_EX [27] $end
$var wire 1 Q& ReadData2_EX [26] $end
$var wire 1 R& ReadData2_EX [25] $end
$var wire 1 S& ReadData2_EX [24] $end
$var wire 1 T& ReadData2_EX [23] $end
$var wire 1 U& ReadData2_EX [22] $end
$var wire 1 V& ReadData2_EX [21] $end
$var wire 1 W& ReadData2_EX [20] $end
$var wire 1 X& ReadData2_EX [19] $end
$var wire 1 Y& ReadData2_EX [18] $end
$var wire 1 Z& ReadData2_EX [17] $end
$var wire 1 [& ReadData2_EX [16] $end
$var wire 1 \& ReadData2_EX [15] $end
$var wire 1 ]& ReadData2_EX [14] $end
$var wire 1 ^& ReadData2_EX [13] $end
$var wire 1 _& ReadData2_EX [12] $end
$var wire 1 `& ReadData2_EX [11] $end
$var wire 1 a& ReadData2_EX [10] $end
$var wire 1 b& ReadData2_EX [9] $end
$var wire 1 c& ReadData2_EX [8] $end
$var wire 1 d& ReadData2_EX [7] $end
$var wire 1 e& ReadData2_EX [6] $end
$var wire 1 f& ReadData2_EX [5] $end
$var wire 1 g& ReadData2_EX [4] $end
$var wire 1 h& ReadData2_EX [3] $end
$var wire 1 i& ReadData2_EX [2] $end
$var wire 1 j& ReadData2_EX [1] $end
$var wire 1 k& ReadData2_EX [0] $end
$var wire 1 l& SignImm_EX [31] $end
$var wire 1 m& SignImm_EX [30] $end
$var wire 1 n& SignImm_EX [29] $end
$var wire 1 o& SignImm_EX [28] $end
$var wire 1 p& SignImm_EX [27] $end
$var wire 1 q& SignImm_EX [26] $end
$var wire 1 r& SignImm_EX [25] $end
$var wire 1 s& SignImm_EX [24] $end
$var wire 1 t& SignImm_EX [23] $end
$var wire 1 u& SignImm_EX [22] $end
$var wire 1 v& SignImm_EX [21] $end
$var wire 1 w& SignImm_EX [20] $end
$var wire 1 x& SignImm_EX [19] $end
$var wire 1 y& SignImm_EX [18] $end
$var wire 1 z& SignImm_EX [17] $end
$var wire 1 {& SignImm_EX [16] $end
$var wire 1 |& SignImm_EX [15] $end
$var wire 1 }& SignImm_EX [14] $end
$var wire 1 ~& SignImm_EX [13] $end
$var wire 1 !' SignImm_EX [12] $end
$var wire 1 "' SignImm_EX [11] $end
$var wire 1 #' SignImm_EX [10] $end
$var wire 1 $' SignImm_EX [9] $end
$var wire 1 %' SignImm_EX [8] $end
$var wire 1 &' SignImm_EX [7] $end
$var wire 1 '' SignImm_EX [6] $end
$var wire 1 (' SignImm_EX [5] $end
$var wire 1 )' SignImm_EX [4] $end
$var wire 1 *' SignImm_EX [3] $end
$var wire 1 +' SignImm_EX [2] $end
$var wire 1 ,' SignImm_EX [1] $end
$var wire 1 -' SignImm_EX [0] $end
$var wire 1 .' ALUOut_EX [31] $end
$var wire 1 /' ALUOut_EX [30] $end
$var wire 1 0' ALUOut_EX [29] $end
$var wire 1 1' ALUOut_EX [28] $end
$var wire 1 2' ALUOut_EX [27] $end
$var wire 1 3' ALUOut_EX [26] $end
$var wire 1 4' ALUOut_EX [25] $end
$var wire 1 5' ALUOut_EX [24] $end
$var wire 1 6' ALUOut_EX [23] $end
$var wire 1 7' ALUOut_EX [22] $end
$var wire 1 8' ALUOut_EX [21] $end
$var wire 1 9' ALUOut_EX [20] $end
$var wire 1 :' ALUOut_EX [19] $end
$var wire 1 ;' ALUOut_EX [18] $end
$var wire 1 <' ALUOut_EX [17] $end
$var wire 1 =' ALUOut_EX [16] $end
$var wire 1 >' ALUOut_EX [15] $end
$var wire 1 ?' ALUOut_EX [14] $end
$var wire 1 @' ALUOut_EX [13] $end
$var wire 1 A' ALUOut_EX [12] $end
$var wire 1 B' ALUOut_EX [11] $end
$var wire 1 C' ALUOut_EX [10] $end
$var wire 1 D' ALUOut_EX [9] $end
$var wire 1 E' ALUOut_EX [8] $end
$var wire 1 F' ALUOut_EX [7] $end
$var wire 1 G' ALUOut_EX [6] $end
$var wire 1 H' ALUOut_EX [5] $end
$var wire 1 I' ALUOut_EX [4] $end
$var wire 1 J' ALUOut_EX [3] $end
$var wire 1 K' ALUOut_EX [2] $end
$var wire 1 L' ALUOut_EX [1] $end
$var wire 1 M' ALUOut_EX [0] $end
$var wire 1 N' ALUSrcA_EX [31] $end
$var wire 1 O' ALUSrcA_EX [30] $end
$var wire 1 P' ALUSrcA_EX [29] $end
$var wire 1 Q' ALUSrcA_EX [28] $end
$var wire 1 R' ALUSrcA_EX [27] $end
$var wire 1 S' ALUSrcA_EX [26] $end
$var wire 1 T' ALUSrcA_EX [25] $end
$var wire 1 U' ALUSrcA_EX [24] $end
$var wire 1 V' ALUSrcA_EX [23] $end
$var wire 1 W' ALUSrcA_EX [22] $end
$var wire 1 X' ALUSrcA_EX [21] $end
$var wire 1 Y' ALUSrcA_EX [20] $end
$var wire 1 Z' ALUSrcA_EX [19] $end
$var wire 1 [' ALUSrcA_EX [18] $end
$var wire 1 \' ALUSrcA_EX [17] $end
$var wire 1 ]' ALUSrcA_EX [16] $end
$var wire 1 ^' ALUSrcA_EX [15] $end
$var wire 1 _' ALUSrcA_EX [14] $end
$var wire 1 `' ALUSrcA_EX [13] $end
$var wire 1 a' ALUSrcA_EX [12] $end
$var wire 1 b' ALUSrcA_EX [11] $end
$var wire 1 c' ALUSrcA_EX [10] $end
$var wire 1 d' ALUSrcA_EX [9] $end
$var wire 1 e' ALUSrcA_EX [8] $end
$var wire 1 f' ALUSrcA_EX [7] $end
$var wire 1 g' ALUSrcA_EX [6] $end
$var wire 1 h' ALUSrcA_EX [5] $end
$var wire 1 i' ALUSrcA_EX [4] $end
$var wire 1 j' ALUSrcA_EX [3] $end
$var wire 1 k' ALUSrcA_EX [2] $end
$var wire 1 l' ALUSrcA_EX [1] $end
$var wire 1 m' ALUSrcA_EX [0] $end
$var wire 1 n' ALUSrcB_EX [31] $end
$var wire 1 o' ALUSrcB_EX [30] $end
$var wire 1 p' ALUSrcB_EX [29] $end
$var wire 1 q' ALUSrcB_EX [28] $end
$var wire 1 r' ALUSrcB_EX [27] $end
$var wire 1 s' ALUSrcB_EX [26] $end
$var wire 1 t' ALUSrcB_EX [25] $end
$var wire 1 u' ALUSrcB_EX [24] $end
$var wire 1 v' ALUSrcB_EX [23] $end
$var wire 1 w' ALUSrcB_EX [22] $end
$var wire 1 x' ALUSrcB_EX [21] $end
$var wire 1 y' ALUSrcB_EX [20] $end
$var wire 1 z' ALUSrcB_EX [19] $end
$var wire 1 {' ALUSrcB_EX [18] $end
$var wire 1 |' ALUSrcB_EX [17] $end
$var wire 1 }' ALUSrcB_EX [16] $end
$var wire 1 ~' ALUSrcB_EX [15] $end
$var wire 1 !( ALUSrcB_EX [14] $end
$var wire 1 "( ALUSrcB_EX [13] $end
$var wire 1 #( ALUSrcB_EX [12] $end
$var wire 1 $( ALUSrcB_EX [11] $end
$var wire 1 %( ALUSrcB_EX [10] $end
$var wire 1 &( ALUSrcB_EX [9] $end
$var wire 1 '( ALUSrcB_EX [8] $end
$var wire 1 (( ALUSrcB_EX [7] $end
$var wire 1 )( ALUSrcB_EX [6] $end
$var wire 1 *( ALUSrcB_EX [5] $end
$var wire 1 +( ALUSrcB_EX [4] $end
$var wire 1 ,( ALUSrcB_EX [3] $end
$var wire 1 -( ALUSrcB_EX [2] $end
$var wire 1 .( ALUSrcB_EX [1] $end
$var wire 1 /( ALUSrcB_EX [0] $end
$var wire 1 0( WriteData_EX [31] $end
$var wire 1 1( WriteData_EX [30] $end
$var wire 1 2( WriteData_EX [29] $end
$var wire 1 3( WriteData_EX [28] $end
$var wire 1 4( WriteData_EX [27] $end
$var wire 1 5( WriteData_EX [26] $end
$var wire 1 6( WriteData_EX [25] $end
$var wire 1 7( WriteData_EX [24] $end
$var wire 1 8( WriteData_EX [23] $end
$var wire 1 9( WriteData_EX [22] $end
$var wire 1 :( WriteData_EX [21] $end
$var wire 1 ;( WriteData_EX [20] $end
$var wire 1 <( WriteData_EX [19] $end
$var wire 1 =( WriteData_EX [18] $end
$var wire 1 >( WriteData_EX [17] $end
$var wire 1 ?( WriteData_EX [16] $end
$var wire 1 @( WriteData_EX [15] $end
$var wire 1 A( WriteData_EX [14] $end
$var wire 1 B( WriteData_EX [13] $end
$var wire 1 C( WriteData_EX [12] $end
$var wire 1 D( WriteData_EX [11] $end
$var wire 1 E( WriteData_EX [10] $end
$var wire 1 F( WriteData_EX [9] $end
$var wire 1 G( WriteData_EX [8] $end
$var wire 1 H( WriteData_EX [7] $end
$var wire 1 I( WriteData_EX [6] $end
$var wire 1 J( WriteData_EX [5] $end
$var wire 1 K( WriteData_EX [4] $end
$var wire 1 L( WriteData_EX [3] $end
$var wire 1 M( WriteData_EX [2] $end
$var wire 1 N( WriteData_EX [1] $end
$var wire 1 O( WriteData_EX [0] $end
$var wire 1 P( Rs_EX [4] $end
$var wire 1 Q( Rs_EX [3] $end
$var wire 1 R( Rs_EX [2] $end
$var wire 1 S( Rs_EX [1] $end
$var wire 1 T( Rs_EX [0] $end
$var wire 1 U( Rt_EX [4] $end
$var wire 1 V( Rt_EX [3] $end
$var wire 1 W( Rt_EX [2] $end
$var wire 1 X( Rt_EX [1] $end
$var wire 1 Y( Rt_EX [0] $end
$var wire 1 Z( Rd_EX [4] $end
$var wire 1 [( Rd_EX [3] $end
$var wire 1 \( Rd_EX [2] $end
$var wire 1 ]( Rd_EX [1] $end
$var wire 1 ^( Rd_EX [0] $end
$var wire 1 _( Shamt_EX [4] $end
$var wire 1 `( Shamt_EX [3] $end
$var wire 1 a( Shamt_EX [2] $end
$var wire 1 b( Shamt_EX [1] $end
$var wire 1 c( Shamt_EX [0] $end
$var wire 1 d( WriteReg_EX [4] $end
$var wire 1 e( WriteReg_EX [3] $end
$var wire 1 f( WriteReg_EX [2] $end
$var wire 1 g( WriteReg_EX [1] $end
$var wire 1 h( WriteReg_EX [0] $end
$var wire 1 i( RegWrite_EX $end
$var wire 1 j( MemtoReg_EX $end
$var wire 1 k( MemWrite_EX $end
$var wire 1 l( ALUSrc_EX $end
$var wire 1 m( RegDst_EX $end
$var wire 1 n( Branch_EX $end
$var wire 1 o( Jump_EX $end
$var wire 1 p( Zero_EX $end
$var wire 1 q( ALUControl_EX [3] $end
$var wire 1 r( ALUControl_EX [2] $end
$var wire 1 s( ALUControl_EX [1] $end
$var wire 1 t( ALUControl_EX [0] $end
$var wire 1 u( ForwardA [1] $end
$var wire 1 v( ForwardA [0] $end
$var wire 1 w( ForwardB [1] $end
$var wire 1 x( ForwardB [0] $end
$var wire 1 y( BranchTarget_EX [31] $end
$var wire 1 z( BranchTarget_EX [30] $end
$var wire 1 {( BranchTarget_EX [29] $end
$var wire 1 |( BranchTarget_EX [28] $end
$var wire 1 }( BranchTarget_EX [27] $end
$var wire 1 ~( BranchTarget_EX [26] $end
$var wire 1 !) BranchTarget_EX [25] $end
$var wire 1 ") BranchTarget_EX [24] $end
$var wire 1 #) BranchTarget_EX [23] $end
$var wire 1 $) BranchTarget_EX [22] $end
$var wire 1 %) BranchTarget_EX [21] $end
$var wire 1 &) BranchTarget_EX [20] $end
$var wire 1 ') BranchTarget_EX [19] $end
$var wire 1 () BranchTarget_EX [18] $end
$var wire 1 )) BranchTarget_EX [17] $end
$var wire 1 *) BranchTarget_EX [16] $end
$var wire 1 +) BranchTarget_EX [15] $end
$var wire 1 ,) BranchTarget_EX [14] $end
$var wire 1 -) BranchTarget_EX [13] $end
$var wire 1 .) BranchTarget_EX [12] $end
$var wire 1 /) BranchTarget_EX [11] $end
$var wire 1 0) BranchTarget_EX [10] $end
$var wire 1 1) BranchTarget_EX [9] $end
$var wire 1 2) BranchTarget_EX [8] $end
$var wire 1 3) BranchTarget_EX [7] $end
$var wire 1 4) BranchTarget_EX [6] $end
$var wire 1 5) BranchTarget_EX [5] $end
$var wire 1 6) BranchTarget_EX [4] $end
$var wire 1 7) BranchTarget_EX [3] $end
$var wire 1 8) BranchTarget_EX [2] $end
$var wire 1 9) BranchTarget_EX [1] $end
$var wire 1 :) BranchTarget_EX [0] $end
$var wire 1 ;) BranchTarget_MEM [31] $end
$var wire 1 <) BranchTarget_MEM [30] $end
$var wire 1 =) BranchTarget_MEM [29] $end
$var wire 1 >) BranchTarget_MEM [28] $end
$var wire 1 ?) BranchTarget_MEM [27] $end
$var wire 1 @) BranchTarget_MEM [26] $end
$var wire 1 A) BranchTarget_MEM [25] $end
$var wire 1 B) BranchTarget_MEM [24] $end
$var wire 1 C) BranchTarget_MEM [23] $end
$var wire 1 D) BranchTarget_MEM [22] $end
$var wire 1 E) BranchTarget_MEM [21] $end
$var wire 1 F) BranchTarget_MEM [20] $end
$var wire 1 G) BranchTarget_MEM [19] $end
$var wire 1 H) BranchTarget_MEM [18] $end
$var wire 1 I) BranchTarget_MEM [17] $end
$var wire 1 J) BranchTarget_MEM [16] $end
$var wire 1 K) BranchTarget_MEM [15] $end
$var wire 1 L) BranchTarget_MEM [14] $end
$var wire 1 M) BranchTarget_MEM [13] $end
$var wire 1 N) BranchTarget_MEM [12] $end
$var wire 1 O) BranchTarget_MEM [11] $end
$var wire 1 P) BranchTarget_MEM [10] $end
$var wire 1 Q) BranchTarget_MEM [9] $end
$var wire 1 R) BranchTarget_MEM [8] $end
$var wire 1 S) BranchTarget_MEM [7] $end
$var wire 1 T) BranchTarget_MEM [6] $end
$var wire 1 U) BranchTarget_MEM [5] $end
$var wire 1 V) BranchTarget_MEM [4] $end
$var wire 1 W) BranchTarget_MEM [3] $end
$var wire 1 X) BranchTarget_MEM [2] $end
$var wire 1 Y) BranchTarget_MEM [1] $end
$var wire 1 Z) BranchTarget_MEM [0] $end
$var wire 1 [) ALUResult_MEM [31] $end
$var wire 1 \) ALUResult_MEM [30] $end
$var wire 1 ]) ALUResult_MEM [29] $end
$var wire 1 ^) ALUResult_MEM [28] $end
$var wire 1 _) ALUResult_MEM [27] $end
$var wire 1 `) ALUResult_MEM [26] $end
$var wire 1 a) ALUResult_MEM [25] $end
$var wire 1 b) ALUResult_MEM [24] $end
$var wire 1 c) ALUResult_MEM [23] $end
$var wire 1 d) ALUResult_MEM [22] $end
$var wire 1 e) ALUResult_MEM [21] $end
$var wire 1 f) ALUResult_MEM [20] $end
$var wire 1 g) ALUResult_MEM [19] $end
$var wire 1 h) ALUResult_MEM [18] $end
$var wire 1 i) ALUResult_MEM [17] $end
$var wire 1 j) ALUResult_MEM [16] $end
$var wire 1 k) ALUResult_MEM [15] $end
$var wire 1 l) ALUResult_MEM [14] $end
$var wire 1 m) ALUResult_MEM [13] $end
$var wire 1 n) ALUResult_MEM [12] $end
$var wire 1 o) ALUResult_MEM [11] $end
$var wire 1 p) ALUResult_MEM [10] $end
$var wire 1 q) ALUResult_MEM [9] $end
$var wire 1 r) ALUResult_MEM [8] $end
$var wire 1 s) ALUResult_MEM [7] $end
$var wire 1 t) ALUResult_MEM [6] $end
$var wire 1 u) ALUResult_MEM [5] $end
$var wire 1 v) ALUResult_MEM [4] $end
$var wire 1 w) ALUResult_MEM [3] $end
$var wire 1 x) ALUResult_MEM [2] $end
$var wire 1 y) ALUResult_MEM [1] $end
$var wire 1 z) ALUResult_MEM [0] $end
$var wire 1 {) WriteData_MEM [31] $end
$var wire 1 |) WriteData_MEM [30] $end
$var wire 1 }) WriteData_MEM [29] $end
$var wire 1 ~) WriteData_MEM [28] $end
$var wire 1 !* WriteData_MEM [27] $end
$var wire 1 "* WriteData_MEM [26] $end
$var wire 1 #* WriteData_MEM [25] $end
$var wire 1 $* WriteData_MEM [24] $end
$var wire 1 %* WriteData_MEM [23] $end
$var wire 1 &* WriteData_MEM [22] $end
$var wire 1 '* WriteData_MEM [21] $end
$var wire 1 (* WriteData_MEM [20] $end
$var wire 1 )* WriteData_MEM [19] $end
$var wire 1 ** WriteData_MEM [18] $end
$var wire 1 +* WriteData_MEM [17] $end
$var wire 1 ,* WriteData_MEM [16] $end
$var wire 1 -* WriteData_MEM [15] $end
$var wire 1 .* WriteData_MEM [14] $end
$var wire 1 /* WriteData_MEM [13] $end
$var wire 1 0* WriteData_MEM [12] $end
$var wire 1 1* WriteData_MEM [11] $end
$var wire 1 2* WriteData_MEM [10] $end
$var wire 1 3* WriteData_MEM [9] $end
$var wire 1 4* WriteData_MEM [8] $end
$var wire 1 5* WriteData_MEM [7] $end
$var wire 1 6* WriteData_MEM [6] $end
$var wire 1 7* WriteData_MEM [5] $end
$var wire 1 8* WriteData_MEM [4] $end
$var wire 1 9* WriteData_MEM [3] $end
$var wire 1 :* WriteData_MEM [2] $end
$var wire 1 ;* WriteData_MEM [1] $end
$var wire 1 <* WriteData_MEM [0] $end
$var wire 1 =* WriteReg_MEM [4] $end
$var wire 1 >* WriteReg_MEM [3] $end
$var wire 1 ?* WriteReg_MEM [2] $end
$var wire 1 @* WriteReg_MEM [1] $end
$var wire 1 A* WriteReg_MEM [0] $end
$var wire 1 B* RegWrite_MEM $end
$var wire 1 C* MemtoReg_MEM $end
$var wire 1 D* MemWrite_MEM $end
$var wire 1 E* Branch_MEM $end
$var wire 1 F* Zero_MEM $end
$var wire 1 G* ReadData_WB [31] $end
$var wire 1 H* ReadData_WB [30] $end
$var wire 1 I* ReadData_WB [29] $end
$var wire 1 J* ReadData_WB [28] $end
$var wire 1 K* ReadData_WB [27] $end
$var wire 1 L* ReadData_WB [26] $end
$var wire 1 M* ReadData_WB [25] $end
$var wire 1 N* ReadData_WB [24] $end
$var wire 1 O* ReadData_WB [23] $end
$var wire 1 P* ReadData_WB [22] $end
$var wire 1 Q* ReadData_WB [21] $end
$var wire 1 R* ReadData_WB [20] $end
$var wire 1 S* ReadData_WB [19] $end
$var wire 1 T* ReadData_WB [18] $end
$var wire 1 U* ReadData_WB [17] $end
$var wire 1 V* ReadData_WB [16] $end
$var wire 1 W* ReadData_WB [15] $end
$var wire 1 X* ReadData_WB [14] $end
$var wire 1 Y* ReadData_WB [13] $end
$var wire 1 Z* ReadData_WB [12] $end
$var wire 1 [* ReadData_WB [11] $end
$var wire 1 \* ReadData_WB [10] $end
$var wire 1 ]* ReadData_WB [9] $end
$var wire 1 ^* ReadData_WB [8] $end
$var wire 1 _* ReadData_WB [7] $end
$var wire 1 `* ReadData_WB [6] $end
$var wire 1 a* ReadData_WB [5] $end
$var wire 1 b* ReadData_WB [4] $end
$var wire 1 c* ReadData_WB [3] $end
$var wire 1 d* ReadData_WB [2] $end
$var wire 1 e* ReadData_WB [1] $end
$var wire 1 f* ReadData_WB [0] $end
$var wire 1 g* ALUResult_WB [31] $end
$var wire 1 h* ALUResult_WB [30] $end
$var wire 1 i* ALUResult_WB [29] $end
$var wire 1 j* ALUResult_WB [28] $end
$var wire 1 k* ALUResult_WB [27] $end
$var wire 1 l* ALUResult_WB [26] $end
$var wire 1 m* ALUResult_WB [25] $end
$var wire 1 n* ALUResult_WB [24] $end
$var wire 1 o* ALUResult_WB [23] $end
$var wire 1 p* ALUResult_WB [22] $end
$var wire 1 q* ALUResult_WB [21] $end
$var wire 1 r* ALUResult_WB [20] $end
$var wire 1 s* ALUResult_WB [19] $end
$var wire 1 t* ALUResult_WB [18] $end
$var wire 1 u* ALUResult_WB [17] $end
$var wire 1 v* ALUResult_WB [16] $end
$var wire 1 w* ALUResult_WB [15] $end
$var wire 1 x* ALUResult_WB [14] $end
$var wire 1 y* ALUResult_WB [13] $end
$var wire 1 z* ALUResult_WB [12] $end
$var wire 1 {* ALUResult_WB [11] $end
$var wire 1 |* ALUResult_WB [10] $end
$var wire 1 }* ALUResult_WB [9] $end
$var wire 1 ~* ALUResult_WB [8] $end
$var wire 1 !+ ALUResult_WB [7] $end
$var wire 1 "+ ALUResult_WB [6] $end
$var wire 1 #+ ALUResult_WB [5] $end
$var wire 1 $+ ALUResult_WB [4] $end
$var wire 1 %+ ALUResult_WB [3] $end
$var wire 1 &+ ALUResult_WB [2] $end
$var wire 1 '+ ALUResult_WB [1] $end
$var wire 1 (+ ALUResult_WB [0] $end
$var wire 1 )+ Result_WB [31] $end
$var wire 1 *+ Result_WB [30] $end
$var wire 1 ++ Result_WB [29] $end
$var wire 1 ,+ Result_WB [28] $end
$var wire 1 -+ Result_WB [27] $end
$var wire 1 .+ Result_WB [26] $end
$var wire 1 /+ Result_WB [25] $end
$var wire 1 0+ Result_WB [24] $end
$var wire 1 1+ Result_WB [23] $end
$var wire 1 2+ Result_WB [22] $end
$var wire 1 3+ Result_WB [21] $end
$var wire 1 4+ Result_WB [20] $end
$var wire 1 5+ Result_WB [19] $end
$var wire 1 6+ Result_WB [18] $end
$var wire 1 7+ Result_WB [17] $end
$var wire 1 8+ Result_WB [16] $end
$var wire 1 9+ Result_WB [15] $end
$var wire 1 :+ Result_WB [14] $end
$var wire 1 ;+ Result_WB [13] $end
$var wire 1 <+ Result_WB [12] $end
$var wire 1 =+ Result_WB [11] $end
$var wire 1 >+ Result_WB [10] $end
$var wire 1 ?+ Result_WB [9] $end
$var wire 1 @+ Result_WB [8] $end
$var wire 1 A+ Result_WB [7] $end
$var wire 1 B+ Result_WB [6] $end
$var wire 1 C+ Result_WB [5] $end
$var wire 1 D+ Result_WB [4] $end
$var wire 1 E+ Result_WB [3] $end
$var wire 1 F+ Result_WB [2] $end
$var wire 1 G+ Result_WB [1] $end
$var wire 1 H+ Result_WB [0] $end
$var wire 1 I+ WriteReg_WB [4] $end
$var wire 1 J+ WriteReg_WB [3] $end
$var wire 1 K+ WriteReg_WB [2] $end
$var wire 1 L+ WriteReg_WB [1] $end
$var wire 1 M+ WriteReg_WB [0] $end
$var wire 1 N+ RegWrite_WB $end
$var wire 1 O+ MemtoReg_WB $end
$var wire 1 P+ PCSrc_actual $end
$var wire 1 Q+ jump_addr [31] $end
$var wire 1 R+ jump_addr [30] $end
$var wire 1 S+ jump_addr [29] $end
$var wire 1 T+ jump_addr [28] $end
$var wire 1 U+ jump_addr [27] $end
$var wire 1 V+ jump_addr [26] $end
$var wire 1 W+ jump_addr [25] $end
$var wire 1 X+ jump_addr [24] $end
$var wire 1 Y+ jump_addr [23] $end
$var wire 1 Z+ jump_addr [22] $end
$var wire 1 [+ jump_addr [21] $end
$var wire 1 \+ jump_addr [20] $end
$var wire 1 ]+ jump_addr [19] $end
$var wire 1 ^+ jump_addr [18] $end
$var wire 1 _+ jump_addr [17] $end
$var wire 1 `+ jump_addr [16] $end
$var wire 1 a+ jump_addr [15] $end
$var wire 1 b+ jump_addr [14] $end
$var wire 1 c+ jump_addr [13] $end
$var wire 1 d+ jump_addr [12] $end
$var wire 1 e+ jump_addr [11] $end
$var wire 1 f+ jump_addr [10] $end
$var wire 1 g+ jump_addr [9] $end
$var wire 1 h+ jump_addr [8] $end
$var wire 1 i+ jump_addr [7] $end
$var wire 1 j+ jump_addr [6] $end
$var wire 1 k+ jump_addr [5] $end
$var wire 1 l+ jump_addr [4] $end
$var wire 1 m+ jump_addr [3] $end
$var wire 1 n+ jump_addr [2] $end
$var wire 1 o+ jump_addr [1] $end
$var wire 1 p+ jump_addr [0] $end
$var wire 1 q+ SignImm_shifted [31] $end
$var wire 1 r+ SignImm_shifted [30] $end
$var wire 1 s+ SignImm_shifted [29] $end
$var wire 1 t+ SignImm_shifted [28] $end
$var wire 1 u+ SignImm_shifted [27] $end
$var wire 1 v+ SignImm_shifted [26] $end
$var wire 1 w+ SignImm_shifted [25] $end
$var wire 1 x+ SignImm_shifted [24] $end
$var wire 1 y+ SignImm_shifted [23] $end
$var wire 1 z+ SignImm_shifted [22] $end
$var wire 1 {+ SignImm_shifted [21] $end
$var wire 1 |+ SignImm_shifted [20] $end
$var wire 1 }+ SignImm_shifted [19] $end
$var wire 1 ~+ SignImm_shifted [18] $end
$var wire 1 !, SignImm_shifted [17] $end
$var wire 1 ", SignImm_shifted [16] $end
$var wire 1 #, SignImm_shifted [15] $end
$var wire 1 $, SignImm_shifted [14] $end
$var wire 1 %, SignImm_shifted [13] $end
$var wire 1 &, SignImm_shifted [12] $end
$var wire 1 ', SignImm_shifted [11] $end
$var wire 1 (, SignImm_shifted [10] $end
$var wire 1 ), SignImm_shifted [9] $end
$var wire 1 *, SignImm_shifted [8] $end
$var wire 1 +, SignImm_shifted [7] $end
$var wire 1 ,, SignImm_shifted [6] $end
$var wire 1 -, SignImm_shifted [5] $end
$var wire 1 ., SignImm_shifted [4] $end
$var wire 1 /, SignImm_shifted [3] $end
$var wire 1 0, SignImm_shifted [2] $end
$var wire 1 1, SignImm_shifted [1] $end
$var wire 1 2, SignImm_shifted [0] $end

$scope module PC_reg $end
$var parameter 32 3, n $end
$var wire 1 f! clk $end
$var wire 1 g! rst $end
$var reg 32 4, q [31:0] $end
$var wire 1 f" d [31] $end
$var wire 1 g" d [30] $end
$var wire 1 h" d [29] $end
$var wire 1 i" d [28] $end
$var wire 1 j" d [27] $end
$var wire 1 k" d [26] $end
$var wire 1 l" d [25] $end
$var wire 1 m" d [24] $end
$var wire 1 n" d [23] $end
$var wire 1 o" d [22] $end
$var wire 1 p" d [21] $end
$var wire 1 q" d [20] $end
$var wire 1 r" d [19] $end
$var wire 1 s" d [18] $end
$var wire 1 t" d [17] $end
$var wire 1 u" d [16] $end
$var wire 1 v" d [15] $end
$var wire 1 w" d [14] $end
$var wire 1 x" d [13] $end
$var wire 1 y" d [12] $end
$var wire 1 z" d [11] $end
$var wire 1 {" d [10] $end
$var wire 1 |" d [9] $end
$var wire 1 }" d [8] $end
$var wire 1 ~" d [7] $end
$var wire 1 !# d [6] $end
$var wire 1 "# d [5] $end
$var wire 1 ## d [4] $end
$var wire 1 $# d [3] $end
$var wire 1 %# d [2] $end
$var wire 1 &# d [1] $end
$var wire 1 '# d [0] $end
$upscope $end

$scope module IF_ID_reg $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 5, stall $end
$var wire 1 6, flush $end
$var wire 1 (# PC_in [31] $end
$var wire 1 )# PC_in [30] $end
$var wire 1 *# PC_in [29] $end
$var wire 1 +# PC_in [28] $end
$var wire 1 ,# PC_in [27] $end
$var wire 1 -# PC_in [26] $end
$var wire 1 .# PC_in [25] $end
$var wire 1 /# PC_in [24] $end
$var wire 1 0# PC_in [23] $end
$var wire 1 1# PC_in [22] $end
$var wire 1 2# PC_in [21] $end
$var wire 1 3# PC_in [20] $end
$var wire 1 4# PC_in [19] $end
$var wire 1 5# PC_in [18] $end
$var wire 1 6# PC_in [17] $end
$var wire 1 7# PC_in [16] $end
$var wire 1 8# PC_in [15] $end
$var wire 1 9# PC_in [14] $end
$var wire 1 :# PC_in [13] $end
$var wire 1 ;# PC_in [12] $end
$var wire 1 <# PC_in [11] $end
$var wire 1 =# PC_in [10] $end
$var wire 1 ># PC_in [9] $end
$var wire 1 ?# PC_in [8] $end
$var wire 1 @# PC_in [7] $end
$var wire 1 A# PC_in [6] $end
$var wire 1 B# PC_in [5] $end
$var wire 1 C# PC_in [4] $end
$var wire 1 D# PC_in [3] $end
$var wire 1 E# PC_in [2] $end
$var wire 1 F# PC_in [1] $end
$var wire 1 G# PC_in [0] $end
$var wire 1 H# Instr_in [31] $end
$var wire 1 I# Instr_in [30] $end
$var wire 1 J# Instr_in [29] $end
$var wire 1 K# Instr_in [28] $end
$var wire 1 L# Instr_in [27] $end
$var wire 1 M# Instr_in [26] $end
$var wire 1 N# Instr_in [25] $end
$var wire 1 O# Instr_in [24] $end
$var wire 1 P# Instr_in [23] $end
$var wire 1 Q# Instr_in [22] $end
$var wire 1 R# Instr_in [21] $end
$var wire 1 S# Instr_in [20] $end
$var wire 1 T# Instr_in [19] $end
$var wire 1 U# Instr_in [18] $end
$var wire 1 V# Instr_in [17] $end
$var wire 1 W# Instr_in [16] $end
$var wire 1 X# Instr_in [15] $end
$var wire 1 Y# Instr_in [14] $end
$var wire 1 Z# Instr_in [13] $end
$var wire 1 [# Instr_in [12] $end
$var wire 1 \# Instr_in [11] $end
$var wire 1 ]# Instr_in [10] $end
$var wire 1 ^# Instr_in [9] $end
$var wire 1 _# Instr_in [8] $end
$var wire 1 `# Instr_in [7] $end
$var wire 1 a# Instr_in [6] $end
$var wire 1 b# Instr_in [5] $end
$var wire 1 c# Instr_in [4] $end
$var wire 1 d# Instr_in [3] $end
$var wire 1 e# Instr_in [2] $end
$var wire 1 f# Instr_in [1] $end
$var wire 1 g# Instr_in [0] $end
$var reg 32 7, PC_out [31:0] $end
$var reg 32 8, Instr_out [31:0] $end
$upscope $end

$scope module control $end
$var wire 1 ,$ Opcode [5] $end
$var wire 1 -$ Opcode [4] $end
$var wire 1 .$ Opcode [3] $end
$var wire 1 /$ Opcode [2] $end
$var wire 1 0$ Opcode [1] $end
$var wire 1 1$ Opcode [0] $end
$var wire 1 F$ Func [5] $end
$var wire 1 G$ Func [4] $end
$var wire 1 H$ Func [3] $end
$var wire 1 I$ Func [2] $end
$var wire 1 J$ Func [1] $end
$var wire 1 K$ Func [0] $end
$var wire 1 9, Zero $end
$var reg 1 :, MemtoReg $end
$var reg 1 ;, ALUSrc $end
$var reg 1 <, RegDst $end
$var reg 1 =, RegWrite $end
$var reg 1 >, Jump $end
$var wire 1 m! PCSrc $end
$var reg 4 ?, ALUControl [3:0] $end
$var reg 8 @, temp [7:0] $end
$var reg 1 A, Branch $end
$var reg 1 B, MemWrite $end
$upscope $end

$scope module regfile $end
$var wire 1 f! clk $end
$var wire 1 N+ we $end
$var wire 1 g! reset $end
$var wire 1 N% ra1 [4] $end
$var wire 1 O% ra1 [3] $end
$var wire 1 P% ra1 [2] $end
$var wire 1 Q% ra1 [1] $end
$var wire 1 R% ra1 [0] $end
$var wire 1 S% ra2 [4] $end
$var wire 1 T% ra2 [3] $end
$var wire 1 U% ra2 [2] $end
$var wire 1 V% ra2 [1] $end
$var wire 1 W% ra2 [0] $end
$var wire 1 I+ wa [4] $end
$var wire 1 J+ wa [3] $end
$var wire 1 K+ wa [2] $end
$var wire 1 L+ wa [1] $end
$var wire 1 M+ wa [0] $end
$var wire 1 )+ wd [31] $end
$var wire 1 *+ wd [30] $end
$var wire 1 ++ wd [29] $end
$var wire 1 ,+ wd [28] $end
$var wire 1 -+ wd [27] $end
$var wire 1 .+ wd [26] $end
$var wire 1 /+ wd [25] $end
$var wire 1 0+ wd [24] $end
$var wire 1 1+ wd [23] $end
$var wire 1 2+ wd [22] $end
$var wire 1 3+ wd [21] $end
$var wire 1 4+ wd [20] $end
$var wire 1 5+ wd [19] $end
$var wire 1 6+ wd [18] $end
$var wire 1 7+ wd [17] $end
$var wire 1 8+ wd [16] $end
$var wire 1 9+ wd [15] $end
$var wire 1 :+ wd [14] $end
$var wire 1 ;+ wd [13] $end
$var wire 1 <+ wd [12] $end
$var wire 1 =+ wd [11] $end
$var wire 1 >+ wd [10] $end
$var wire 1 ?+ wd [9] $end
$var wire 1 @+ wd [8] $end
$var wire 1 A+ wd [7] $end
$var wire 1 B+ wd [6] $end
$var wire 1 C+ wd [5] $end
$var wire 1 D+ wd [4] $end
$var wire 1 E+ wd [3] $end
$var wire 1 F+ wd [2] $end
$var wire 1 G+ wd [1] $end
$var wire 1 H+ wd [0] $end
$var wire 1 L$ rd1 [31] $end
$var wire 1 M$ rd1 [30] $end
$var wire 1 N$ rd1 [29] $end
$var wire 1 O$ rd1 [28] $end
$var wire 1 P$ rd1 [27] $end
$var wire 1 Q$ rd1 [26] $end
$var wire 1 R$ rd1 [25] $end
$var wire 1 S$ rd1 [24] $end
$var wire 1 T$ rd1 [23] $end
$var wire 1 U$ rd1 [22] $end
$var wire 1 V$ rd1 [21] $end
$var wire 1 W$ rd1 [20] $end
$var wire 1 X$ rd1 [19] $end
$var wire 1 Y$ rd1 [18] $end
$var wire 1 Z$ rd1 [17] $end
$var wire 1 [$ rd1 [16] $end
$var wire 1 \$ rd1 [15] $end
$var wire 1 ]$ rd1 [14] $end
$var wire 1 ^$ rd1 [13] $end
$var wire 1 _$ rd1 [12] $end
$var wire 1 `$ rd1 [11] $end
$var wire 1 a$ rd1 [10] $end
$var wire 1 b$ rd1 [9] $end
$var wire 1 c$ rd1 [8] $end
$var wire 1 d$ rd1 [7] $end
$var wire 1 e$ rd1 [6] $end
$var wire 1 f$ rd1 [5] $end
$var wire 1 g$ rd1 [4] $end
$var wire 1 h$ rd1 [3] $end
$var wire 1 i$ rd1 [2] $end
$var wire 1 j$ rd1 [1] $end
$var wire 1 k$ rd1 [0] $end
$var wire 1 l$ rd2 [31] $end
$var wire 1 m$ rd2 [30] $end
$var wire 1 n$ rd2 [29] $end
$var wire 1 o$ rd2 [28] $end
$var wire 1 p$ rd2 [27] $end
$var wire 1 q$ rd2 [26] $end
$var wire 1 r$ rd2 [25] $end
$var wire 1 s$ rd2 [24] $end
$var wire 1 t$ rd2 [23] $end
$var wire 1 u$ rd2 [22] $end
$var wire 1 v$ rd2 [21] $end
$var wire 1 w$ rd2 [20] $end
$var wire 1 x$ rd2 [19] $end
$var wire 1 y$ rd2 [18] $end
$var wire 1 z$ rd2 [17] $end
$var wire 1 {$ rd2 [16] $end
$var wire 1 |$ rd2 [15] $end
$var wire 1 }$ rd2 [14] $end
$var wire 1 ~$ rd2 [13] $end
$var wire 1 !% rd2 [12] $end
$var wire 1 "% rd2 [11] $end
$var wire 1 #% rd2 [10] $end
$var wire 1 $% rd2 [9] $end
$var wire 1 %% rd2 [8] $end
$var wire 1 &% rd2 [7] $end
$var wire 1 '% rd2 [6] $end
$var wire 1 (% rd2 [5] $end
$var wire 1 )% rd2 [4] $end
$var wire 1 *% rd2 [3] $end
$var wire 1 +% rd2 [2] $end
$var wire 1 ,% rd2 [1] $end
$var wire 1 -% rd2 [0] $end
$var integer 32 C, i $end
$upscope $end

$scope module sign_extend $end
$var wire 1 <$ a [15] $end
$var wire 1 =$ a [14] $end
$var wire 1 >$ a [13] $end
$var wire 1 ?$ a [12] $end
$var wire 1 @$ a [11] $end
$var wire 1 A$ a [10] $end
$var wire 1 B$ a [9] $end
$var wire 1 C$ a [8] $end
$var wire 1 D$ a [7] $end
$var wire 1 E$ a [6] $end
$var wire 1 F$ a [5] $end
$var wire 1 G$ a [4] $end
$var wire 1 H$ a [3] $end
$var wire 1 I$ a [2] $end
$var wire 1 J$ a [1] $end
$var wire 1 K$ a [0] $end
$var wire 1 .% y [31] $end
$var wire 1 /% y [30] $end
$var wire 1 0% y [29] $end
$var wire 1 1% y [28] $end
$var wire 1 2% y [27] $end
$var wire 1 3% y [26] $end
$var wire 1 4% y [25] $end
$var wire 1 5% y [24] $end
$var wire 1 6% y [23] $end
$var wire 1 7% y [22] $end
$var wire 1 8% y [21] $end
$var wire 1 9% y [20] $end
$var wire 1 :% y [19] $end
$var wire 1 ;% y [18] $end
$var wire 1 <% y [17] $end
$var wire 1 =% y [16] $end
$var wire 1 >% y [15] $end
$var wire 1 ?% y [14] $end
$var wire 1 @% y [13] $end
$var wire 1 A% y [12] $end
$var wire 1 B% y [11] $end
$var wire 1 C% y [10] $end
$var wire 1 D% y [9] $end
$var wire 1 E% y [8] $end
$var wire 1 F% y [7] $end
$var wire 1 G% y [6] $end
$var wire 1 H% y [5] $end
$var wire 1 I% y [4] $end
$var wire 1 J% y [3] $end
$var wire 1 K% y [2] $end
$var wire 1 L% y [1] $end
$var wire 1 M% y [0] $end
$upscope $end

$scope module hazard_unit $end
$var wire 1 N% Rs_ID [4] $end
$var wire 1 O% Rs_ID [3] $end
$var wire 1 P% Rs_ID [2] $end
$var wire 1 Q% Rs_ID [1] $end
$var wire 1 R% Rs_ID [0] $end
$var wire 1 S% Rt_ID [4] $end
$var wire 1 T% Rt_ID [3] $end
$var wire 1 U% Rt_ID [2] $end
$var wire 1 V% Rt_ID [1] $end
$var wire 1 W% Rt_ID [0] $end
$var wire 1 U( Rt_EX [4] $end
$var wire 1 V( Rt_EX [3] $end
$var wire 1 W( Rt_EX [2] $end
$var wire 1 X( Rt_EX [1] $end
$var wire 1 Y( Rt_EX [0] $end
$var wire 1 j( MemRead_EX $end
$var wire 1 b% Branch_ID $end
$var wire 1 c% Jump_ID $end
$var reg 1 D, Stall $end
$var reg 1 E, PCWrite $end
$var reg 1 F, IF_IDWrite $end
$upscope $end

$scope module ID_EX_reg $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 i% flush $end
$var wire 1 ]% RegWrite_in $end
$var wire 1 ^% MemtoReg_in $end
$var wire 1 _% MemWrite_in $end
$var wire 1 `% ALUSrc_in $end
$var wire 1 a% RegDst_in $end
$var wire 1 b% Branch_in $end
$var wire 1 c% Jump_in $end
$var wire 1 d% ALUControl_in [3] $end
$var wire 1 e% ALUControl_in [2] $end
$var wire 1 f% ALUControl_in [1] $end
$var wire 1 g% ALUControl_in [0] $end
$var wire 1 j# PC_in [31] $end
$var wire 1 k# PC_in [30] $end
$var wire 1 l# PC_in [29] $end
$var wire 1 m# PC_in [28] $end
$var wire 1 n# PC_in [27] $end
$var wire 1 o# PC_in [26] $end
$var wire 1 p# PC_in [25] $end
$var wire 1 q# PC_in [24] $end
$var wire 1 r# PC_in [23] $end
$var wire 1 s# PC_in [22] $end
$var wire 1 t# PC_in [21] $end
$var wire 1 u# PC_in [20] $end
$var wire 1 v# PC_in [19] $end
$var wire 1 w# PC_in [18] $end
$var wire 1 x# PC_in [17] $end
$var wire 1 y# PC_in [16] $end
$var wire 1 z# PC_in [15] $end
$var wire 1 {# PC_in [14] $end
$var wire 1 |# PC_in [13] $end
$var wire 1 }# PC_in [12] $end
$var wire 1 ~# PC_in [11] $end
$var wire 1 !$ PC_in [10] $end
$var wire 1 "$ PC_in [9] $end
$var wire 1 #$ PC_in [8] $end
$var wire 1 $$ PC_in [7] $end
$var wire 1 %$ PC_in [6] $end
$var wire 1 &$ PC_in [5] $end
$var wire 1 '$ PC_in [4] $end
$var wire 1 ($ PC_in [3] $end
$var wire 1 )$ PC_in [2] $end
$var wire 1 *$ PC_in [1] $end
$var wire 1 +$ PC_in [0] $end
$var wire 1 L$ ReadData1_in [31] $end
$var wire 1 M$ ReadData1_in [30] $end
$var wire 1 N$ ReadData1_in [29] $end
$var wire 1 O$ ReadData1_in [28] $end
$var wire 1 P$ ReadData1_in [27] $end
$var wire 1 Q$ ReadData1_in [26] $end
$var wire 1 R$ ReadData1_in [25] $end
$var wire 1 S$ ReadData1_in [24] $end
$var wire 1 T$ ReadData1_in [23] $end
$var wire 1 U$ ReadData1_in [22] $end
$var wire 1 V$ ReadData1_in [21] $end
$var wire 1 W$ ReadData1_in [20] $end
$var wire 1 X$ ReadData1_in [19] $end
$var wire 1 Y$ ReadData1_in [18] $end
$var wire 1 Z$ ReadData1_in [17] $end
$var wire 1 [$ ReadData1_in [16] $end
$var wire 1 \$ ReadData1_in [15] $end
$var wire 1 ]$ ReadData1_in [14] $end
$var wire 1 ^$ ReadData1_in [13] $end
$var wire 1 _$ ReadData1_in [12] $end
$var wire 1 `$ ReadData1_in [11] $end
$var wire 1 a$ ReadData1_in [10] $end
$var wire 1 b$ ReadData1_in [9] $end
$var wire 1 c$ ReadData1_in [8] $end
$var wire 1 d$ ReadData1_in [7] $end
$var wire 1 e$ ReadData1_in [6] $end
$var wire 1 f$ ReadData1_in [5] $end
$var wire 1 g$ ReadData1_in [4] $end
$var wire 1 h$ ReadData1_in [3] $end
$var wire 1 i$ ReadData1_in [2] $end
$var wire 1 j$ ReadData1_in [1] $end
$var wire 1 k$ ReadData1_in [0] $end
$var wire 1 l$ ReadData2_in [31] $end
$var wire 1 m$ ReadData2_in [30] $end
$var wire 1 n$ ReadData2_in [29] $end
$var wire 1 o$ ReadData2_in [28] $end
$var wire 1 p$ ReadData2_in [27] $end
$var wire 1 q$ ReadData2_in [26] $end
$var wire 1 r$ ReadData2_in [25] $end
$var wire 1 s$ ReadData2_in [24] $end
$var wire 1 t$ ReadData2_in [23] $end
$var wire 1 u$ ReadData2_in [22] $end
$var wire 1 v$ ReadData2_in [21] $end
$var wire 1 w$ ReadData2_in [20] $end
$var wire 1 x$ ReadData2_in [19] $end
$var wire 1 y$ ReadData2_in [18] $end
$var wire 1 z$ ReadData2_in [17] $end
$var wire 1 {$ ReadData2_in [16] $end
$var wire 1 |$ ReadData2_in [15] $end
$var wire 1 }$ ReadData2_in [14] $end
$var wire 1 ~$ ReadData2_in [13] $end
$var wire 1 !% ReadData2_in [12] $end
$var wire 1 "% ReadData2_in [11] $end
$var wire 1 #% ReadData2_in [10] $end
$var wire 1 $% ReadData2_in [9] $end
$var wire 1 %% ReadData2_in [8] $end
$var wire 1 &% ReadData2_in [7] $end
$var wire 1 '% ReadData2_in [6] $end
$var wire 1 (% ReadData2_in [5] $end
$var wire 1 )% ReadData2_in [4] $end
$var wire 1 *% ReadData2_in [3] $end
$var wire 1 +% ReadData2_in [2] $end
$var wire 1 ,% ReadData2_in [1] $end
$var wire 1 -% ReadData2_in [0] $end
$var wire 1 .% SignImm_in [31] $end
$var wire 1 /% SignImm_in [30] $end
$var wire 1 0% SignImm_in [29] $end
$var wire 1 1% SignImm_in [28] $end
$var wire 1 2% SignImm_in [27] $end
$var wire 1 3% SignImm_in [26] $end
$var wire 1 4% SignImm_in [25] $end
$var wire 1 5% SignImm_in [24] $end
$var wire 1 6% SignImm_in [23] $end
$var wire 1 7% SignImm_in [22] $end
$var wire 1 8% SignImm_in [21] $end
$var wire 1 9% SignImm_in [20] $end
$var wire 1 :% SignImm_in [19] $end
$var wire 1 ;% SignImm_in [18] $end
$var wire 1 <% SignImm_in [17] $end
$var wire 1 =% SignImm_in [16] $end
$var wire 1 >% SignImm_in [15] $end
$var wire 1 ?% SignImm_in [14] $end
$var wire 1 @% SignImm_in [13] $end
$var wire 1 A% SignImm_in [12] $end
$var wire 1 B% SignImm_in [11] $end
$var wire 1 C% SignImm_in [10] $end
$var wire 1 D% SignImm_in [9] $end
$var wire 1 E% SignImm_in [8] $end
$var wire 1 F% SignImm_in [7] $end
$var wire 1 G% SignImm_in [6] $end
$var wire 1 H% SignImm_in [5] $end
$var wire 1 I% SignImm_in [4] $end
$var wire 1 J% SignImm_in [3] $end
$var wire 1 K% SignImm_in [2] $end
$var wire 1 L% SignImm_in [1] $end
$var wire 1 M% SignImm_in [0] $end
$var wire 1 N% Rs_in [4] $end
$var wire 1 O% Rs_in [3] $end
$var wire 1 P% Rs_in [2] $end
$var wire 1 Q% Rs_in [1] $end
$var wire 1 R% Rs_in [0] $end
$var wire 1 S% Rt_in [4] $end
$var wire 1 T% Rt_in [3] $end
$var wire 1 U% Rt_in [2] $end
$var wire 1 V% Rt_in [1] $end
$var wire 1 W% Rt_in [0] $end
$var wire 1 X% Rd_in [4] $end
$var wire 1 Y% Rd_in [3] $end
$var wire 1 Z% Rd_in [2] $end
$var wire 1 [% Rd_in [1] $end
$var wire 1 \% Rd_in [0] $end
$var wire 1 A$ Shamt_in [4] $end
$var wire 1 B$ Shamt_in [3] $end
$var wire 1 C$ Shamt_in [2] $end
$var wire 1 D$ Shamt_in [1] $end
$var wire 1 E$ Shamt_in [0] $end
$var reg 1 G, RegWrite_out $end
$var reg 1 H, MemtoReg_out $end
$var reg 1 I, MemWrite_out $end
$var reg 1 J, ALUSrc_out $end
$var reg 1 K, RegDst_out $end
$var reg 1 L, Branch_out $end
$var reg 1 M, Jump_out $end
$var reg 4 N, ALUControl_out [3:0] $end
$var reg 32 O, PC_out [31:0] $end
$var reg 32 P, ReadData1_out [31:0] $end
$var reg 32 Q, ReadData2_out [31:0] $end
$var reg 32 R, SignImm_out [31:0] $end
$var reg 5 S, Rs_out [4:0] $end
$var reg 5 T, Rt_out [4:0] $end
$var reg 5 U, Rd_out [4:0] $end
$var reg 5 V, Shamt_out [4:0] $end
$upscope $end

$scope module forward_unit $end
$var wire 1 P( Rs_EX [4] $end
$var wire 1 Q( Rs_EX [3] $end
$var wire 1 R( Rs_EX [2] $end
$var wire 1 S( Rs_EX [1] $end
$var wire 1 T( Rs_EX [0] $end
$var wire 1 U( Rt_EX [4] $end
$var wire 1 V( Rt_EX [3] $end
$var wire 1 W( Rt_EX [2] $end
$var wire 1 X( Rt_EX [1] $end
$var wire 1 Y( Rt_EX [0] $end
$var wire 1 =* WriteReg_MEM [4] $end
$var wire 1 >* WriteReg_MEM [3] $end
$var wire 1 ?* WriteReg_MEM [2] $end
$var wire 1 @* WriteReg_MEM [1] $end
$var wire 1 A* WriteReg_MEM [0] $end
$var wire 1 I+ WriteReg_WB [4] $end
$var wire 1 J+ WriteReg_WB [3] $end
$var wire 1 K+ WriteReg_WB [2] $end
$var wire 1 L+ WriteReg_WB [1] $end
$var wire 1 M+ WriteReg_WB [0] $end
$var wire 1 B* RegWrite_MEM $end
$var wire 1 N+ RegWrite_WB $end
$var reg 2 W, ForwardA [1:0] $end
$var reg 2 X, ForwardB [1:0] $end
$upscope $end

$scope module alu $end
$var wire 1 N' a [31] $end
$var wire 1 O' a [30] $end
$var wire 1 P' a [29] $end
$var wire 1 Q' a [28] $end
$var wire 1 R' a [27] $end
$var wire 1 S' a [26] $end
$var wire 1 T' a [25] $end
$var wire 1 U' a [24] $end
$var wire 1 V' a [23] $end
$var wire 1 W' a [22] $end
$var wire 1 X' a [21] $end
$var wire 1 Y' a [20] $end
$var wire 1 Z' a [19] $end
$var wire 1 [' a [18] $end
$var wire 1 \' a [17] $end
$var wire 1 ]' a [16] $end
$var wire 1 ^' a [15] $end
$var wire 1 _' a [14] $end
$var wire 1 `' a [13] $end
$var wire 1 a' a [12] $end
$var wire 1 b' a [11] $end
$var wire 1 c' a [10] $end
$var wire 1 d' a [9] $end
$var wire 1 e' a [8] $end
$var wire 1 f' a [7] $end
$var wire 1 g' a [6] $end
$var wire 1 h' a [5] $end
$var wire 1 i' a [4] $end
$var wire 1 j' a [3] $end
$var wire 1 k' a [2] $end
$var wire 1 l' a [1] $end
$var wire 1 m' a [0] $end
$var wire 1 n' b [31] $end
$var wire 1 o' b [30] $end
$var wire 1 p' b [29] $end
$var wire 1 q' b [28] $end
$var wire 1 r' b [27] $end
$var wire 1 s' b [26] $end
$var wire 1 t' b [25] $end
$var wire 1 u' b [24] $end
$var wire 1 v' b [23] $end
$var wire 1 w' b [22] $end
$var wire 1 x' b [21] $end
$var wire 1 y' b [20] $end
$var wire 1 z' b [19] $end
$var wire 1 {' b [18] $end
$var wire 1 |' b [17] $end
$var wire 1 }' b [16] $end
$var wire 1 ~' b [15] $end
$var wire 1 !( b [14] $end
$var wire 1 "( b [13] $end
$var wire 1 #( b [12] $end
$var wire 1 $( b [11] $end
$var wire 1 %( b [10] $end
$var wire 1 &( b [9] $end
$var wire 1 '( b [8] $end
$var wire 1 (( b [7] $end
$var wire 1 )( b [6] $end
$var wire 1 *( b [5] $end
$var wire 1 +( b [4] $end
$var wire 1 ,( b [3] $end
$var wire 1 -( b [2] $end
$var wire 1 .( b [1] $end
$var wire 1 /( b [0] $end
$var wire 1 q( f [3] $end
$var wire 1 r( f [2] $end
$var wire 1 s( f [1] $end
$var wire 1 t( f [0] $end
$var wire 1 _( shamt [4] $end
$var wire 1 `( shamt [3] $end
$var wire 1 a( shamt [2] $end
$var wire 1 b( shamt [1] $end
$var wire 1 c( shamt [0] $end
$var reg 32 Y, y [31:0] $end
$var reg 1 Z, zero $end
$upscope $end

$scope module branch_shift $end
$var wire 1 l& a [31] $end
$var wire 1 m& a [30] $end
$var wire 1 n& a [29] $end
$var wire 1 o& a [28] $end
$var wire 1 p& a [27] $end
$var wire 1 q& a [26] $end
$var wire 1 r& a [25] $end
$var wire 1 s& a [24] $end
$var wire 1 t& a [23] $end
$var wire 1 u& a [22] $end
$var wire 1 v& a [21] $end
$var wire 1 w& a [20] $end
$var wire 1 x& a [19] $end
$var wire 1 y& a [18] $end
$var wire 1 z& a [17] $end
$var wire 1 {& a [16] $end
$var wire 1 |& a [15] $end
$var wire 1 }& a [14] $end
$var wire 1 ~& a [13] $end
$var wire 1 !' a [12] $end
$var wire 1 "' a [11] $end
$var wire 1 #' a [10] $end
$var wire 1 $' a [9] $end
$var wire 1 %' a [8] $end
$var wire 1 &' a [7] $end
$var wire 1 '' a [6] $end
$var wire 1 (' a [5] $end
$var wire 1 )' a [4] $end
$var wire 1 *' a [3] $end
$var wire 1 +' a [2] $end
$var wire 1 ,' a [1] $end
$var wire 1 -' a [0] $end
$var wire 1 q+ y [31] $end
$var wire 1 r+ y [30] $end
$var wire 1 s+ y [29] $end
$var wire 1 t+ y [28] $end
$var wire 1 u+ y [27] $end
$var wire 1 v+ y [26] $end
$var wire 1 w+ y [25] $end
$var wire 1 x+ y [24] $end
$var wire 1 y+ y [23] $end
$var wire 1 z+ y [22] $end
$var wire 1 {+ y [21] $end
$var wire 1 |+ y [20] $end
$var wire 1 }+ y [19] $end
$var wire 1 ~+ y [18] $end
$var wire 1 !, y [17] $end
$var wire 1 ", y [16] $end
$var wire 1 #, y [15] $end
$var wire 1 $, y [14] $end
$var wire 1 %, y [13] $end
$var wire 1 &, y [12] $end
$var wire 1 ', y [11] $end
$var wire 1 (, y [10] $end
$var wire 1 ), y [9] $end
$var wire 1 *, y [8] $end
$var wire 1 +, y [7] $end
$var wire 1 ,, y [6] $end
$var wire 1 -, y [5] $end
$var wire 1 ., y [4] $end
$var wire 1 /, y [3] $end
$var wire 1 0, y [2] $end
$var wire 1 1, y [1] $end
$var wire 1 2, y [0] $end
$upscope $end

$scope module EX_MEM_reg $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 i( RegWrite_in $end
$var wire 1 j( MemtoReg_in $end
$var wire 1 k( MemWrite_in $end
$var wire 1 n( Branch_in $end
$var wire 1 y( BranchTarget_in [31] $end
$var wire 1 z( BranchTarget_in [30] $end
$var wire 1 {( BranchTarget_in [29] $end
$var wire 1 |( BranchTarget_in [28] $end
$var wire 1 }( BranchTarget_in [27] $end
$var wire 1 ~( BranchTarget_in [26] $end
$var wire 1 !) BranchTarget_in [25] $end
$var wire 1 ") BranchTarget_in [24] $end
$var wire 1 #) BranchTarget_in [23] $end
$var wire 1 $) BranchTarget_in [22] $end
$var wire 1 %) BranchTarget_in [21] $end
$var wire 1 &) BranchTarget_in [20] $end
$var wire 1 ') BranchTarget_in [19] $end
$var wire 1 () BranchTarget_in [18] $end
$var wire 1 )) BranchTarget_in [17] $end
$var wire 1 *) BranchTarget_in [16] $end
$var wire 1 +) BranchTarget_in [15] $end
$var wire 1 ,) BranchTarget_in [14] $end
$var wire 1 -) BranchTarget_in [13] $end
$var wire 1 .) BranchTarget_in [12] $end
$var wire 1 /) BranchTarget_in [11] $end
$var wire 1 0) BranchTarget_in [10] $end
$var wire 1 1) BranchTarget_in [9] $end
$var wire 1 2) BranchTarget_in [8] $end
$var wire 1 3) BranchTarget_in [7] $end
$var wire 1 4) BranchTarget_in [6] $end
$var wire 1 5) BranchTarget_in [5] $end
$var wire 1 6) BranchTarget_in [4] $end
$var wire 1 7) BranchTarget_in [3] $end
$var wire 1 8) BranchTarget_in [2] $end
$var wire 1 9) BranchTarget_in [1] $end
$var wire 1 :) BranchTarget_in [0] $end
$var wire 1 .' ALUResult_in [31] $end
$var wire 1 /' ALUResult_in [30] $end
$var wire 1 0' ALUResult_in [29] $end
$var wire 1 1' ALUResult_in [28] $end
$var wire 1 2' ALUResult_in [27] $end
$var wire 1 3' ALUResult_in [26] $end
$var wire 1 4' ALUResult_in [25] $end
$var wire 1 5' ALUResult_in [24] $end
$var wire 1 6' ALUResult_in [23] $end
$var wire 1 7' ALUResult_in [22] $end
$var wire 1 8' ALUResult_in [21] $end
$var wire 1 9' ALUResult_in [20] $end
$var wire 1 :' ALUResult_in [19] $end
$var wire 1 ;' ALUResult_in [18] $end
$var wire 1 <' ALUResult_in [17] $end
$var wire 1 =' ALUResult_in [16] $end
$var wire 1 >' ALUResult_in [15] $end
$var wire 1 ?' ALUResult_in [14] $end
$var wire 1 @' ALUResult_in [13] $end
$var wire 1 A' ALUResult_in [12] $end
$var wire 1 B' ALUResult_in [11] $end
$var wire 1 C' ALUResult_in [10] $end
$var wire 1 D' ALUResult_in [9] $end
$var wire 1 E' ALUResult_in [8] $end
$var wire 1 F' ALUResult_in [7] $end
$var wire 1 G' ALUResult_in [6] $end
$var wire 1 H' ALUResult_in [5] $end
$var wire 1 I' ALUResult_in [4] $end
$var wire 1 J' ALUResult_in [3] $end
$var wire 1 K' ALUResult_in [2] $end
$var wire 1 L' ALUResult_in [1] $end
$var wire 1 M' ALUResult_in [0] $end
$var wire 1 0( WriteData_in [31] $end
$var wire 1 1( WriteData_in [30] $end
$var wire 1 2( WriteData_in [29] $end
$var wire 1 3( WriteData_in [28] $end
$var wire 1 4( WriteData_in [27] $end
$var wire 1 5( WriteData_in [26] $end
$var wire 1 6( WriteData_in [25] $end
$var wire 1 7( WriteData_in [24] $end
$var wire 1 8( WriteData_in [23] $end
$var wire 1 9( WriteData_in [22] $end
$var wire 1 :( WriteData_in [21] $end
$var wire 1 ;( WriteData_in [20] $end
$var wire 1 <( WriteData_in [19] $end
$var wire 1 =( WriteData_in [18] $end
$var wire 1 >( WriteData_in [17] $end
$var wire 1 ?( WriteData_in [16] $end
$var wire 1 @( WriteData_in [15] $end
$var wire 1 A( WriteData_in [14] $end
$var wire 1 B( WriteData_in [13] $end
$var wire 1 C( WriteData_in [12] $end
$var wire 1 D( WriteData_in [11] $end
$var wire 1 E( WriteData_in [10] $end
$var wire 1 F( WriteData_in [9] $end
$var wire 1 G( WriteData_in [8] $end
$var wire 1 H( WriteData_in [7] $end
$var wire 1 I( WriteData_in [6] $end
$var wire 1 J( WriteData_in [5] $end
$var wire 1 K( WriteData_in [4] $end
$var wire 1 L( WriteData_in [3] $end
$var wire 1 M( WriteData_in [2] $end
$var wire 1 N( WriteData_in [1] $end
$var wire 1 O( WriteData_in [0] $end
$var wire 1 d( WriteReg_in [4] $end
$var wire 1 e( WriteReg_in [3] $end
$var wire 1 f( WriteReg_in [2] $end
$var wire 1 g( WriteReg_in [1] $end
$var wire 1 h( WriteReg_in [0] $end
$var wire 1 p( Zero_in $end
$var reg 1 [, RegWrite_out $end
$var reg 1 \, MemtoReg_out $end
$var reg 1 ], MemWrite_out $end
$var reg 1 ^, Branch_out $end
$var reg 32 _, BranchTarget_out [31:0] $end
$var reg 32 `, ALUResult_out [31:0] $end
$var reg 32 a, WriteData_out [31:0] $end
$var reg 5 b, WriteReg_out [4:0] $end
$var reg 1 c, Zero_out $end
$upscope $end

$scope module MEM_WB_reg $end
$var wire 1 f! clk $end
$var wire 1 g! reset $end
$var wire 1 B* RegWrite_in $end
$var wire 1 C* MemtoReg_in $end
$var wire 1 c ReadData_in [31] $end
$var wire 1 d ReadData_in [30] $end
$var wire 1 e ReadData_in [29] $end
$var wire 1 f ReadData_in [28] $end
$var wire 1 g ReadData_in [27] $end
$var wire 1 h ReadData_in [26] $end
$var wire 1 i ReadData_in [25] $end
$var wire 1 j ReadData_in [24] $end
$var wire 1 k ReadData_in [23] $end
$var wire 1 l ReadData_in [22] $end
$var wire 1 m ReadData_in [21] $end
$var wire 1 n ReadData_in [20] $end
$var wire 1 o ReadData_in [19] $end
$var wire 1 p ReadData_in [18] $end
$var wire 1 q ReadData_in [17] $end
$var wire 1 r ReadData_in [16] $end
$var wire 1 s ReadData_in [15] $end
$var wire 1 t ReadData_in [14] $end
$var wire 1 u ReadData_in [13] $end
$var wire 1 v ReadData_in [12] $end
$var wire 1 w ReadData_in [11] $end
$var wire 1 x ReadData_in [10] $end
$var wire 1 y ReadData_in [9] $end
$var wire 1 z ReadData_in [8] $end
$var wire 1 { ReadData_in [7] $end
$var wire 1 | ReadData_in [6] $end
$var wire 1 } ReadData_in [5] $end
$var wire 1 ~ ReadData_in [4] $end
$var wire 1 !! ReadData_in [3] $end
$var wire 1 "! ReadData_in [2] $end
$var wire 1 #! ReadData_in [1] $end
$var wire 1 $! ReadData_in [0] $end
$var wire 1 [) ALUResult_in [31] $end
$var wire 1 \) ALUResult_in [30] $end
$var wire 1 ]) ALUResult_in [29] $end
$var wire 1 ^) ALUResult_in [28] $end
$var wire 1 _) ALUResult_in [27] $end
$var wire 1 `) ALUResult_in [26] $end
$var wire 1 a) ALUResult_in [25] $end
$var wire 1 b) ALUResult_in [24] $end
$var wire 1 c) ALUResult_in [23] $end
$var wire 1 d) ALUResult_in [22] $end
$var wire 1 e) ALUResult_in [21] $end
$var wire 1 f) ALUResult_in [20] $end
$var wire 1 g) ALUResult_in [19] $end
$var wire 1 h) ALUResult_in [18] $end
$var wire 1 i) ALUResult_in [17] $end
$var wire 1 j) ALUResult_in [16] $end
$var wire 1 k) ALUResult_in [15] $end
$var wire 1 l) ALUResult_in [14] $end
$var wire 1 m) ALUResult_in [13] $end
$var wire 1 n) ALUResult_in [12] $end
$var wire 1 o) ALUResult_in [11] $end
$var wire 1 p) ALUResult_in [10] $end
$var wire 1 q) ALUResult_in [9] $end
$var wire 1 r) ALUResult_in [8] $end
$var wire 1 s) ALUResult_in [7] $end
$var wire 1 t) ALUResult_in [6] $end
$var wire 1 u) ALUResult_in [5] $end
$var wire 1 v) ALUResult_in [4] $end
$var wire 1 w) ALUResult_in [3] $end
$var wire 1 x) ALUResult_in [2] $end
$var wire 1 y) ALUResult_in [1] $end
$var wire 1 z) ALUResult_in [0] $end
$var wire 1 =* WriteReg_in [4] $end
$var wire 1 >* WriteReg_in [3] $end
$var wire 1 ?* WriteReg_in [2] $end
$var wire 1 @* WriteReg_in [1] $end
$var wire 1 A* WriteReg_in [0] $end
$var reg 1 d, RegWrite_out $end
$var reg 1 e, MemtoReg_out $end
$var reg 32 f, ReadData_out [31:0] $end
$var reg 32 g, ALUResult_out [31:0] $end
$var reg 5 h, WriteReg_out [4:0] $end
$upscope $end
$upscope $end

$scope module dmem $end
$var wire 1 f! CLK_I $end
$var wire 1 g! RST_I $end
$var wire 1 t! ADR_I [31] $end
$var wire 1 u! ADR_I [30] $end
$var wire 1 v! ADR_I [29] $end
$var wire 1 w! ADR_I [28] $end
$var wire 1 x! ADR_I [27] $end
$var wire 1 y! ADR_I [26] $end
$var wire 1 z! ADR_I [25] $end
$var wire 1 {! ADR_I [24] $end
$var wire 1 |! ADR_I [23] $end
$var wire 1 }! ADR_I [22] $end
$var wire 1 ~! ADR_I [21] $end
$var wire 1 !" ADR_I [20] $end
$var wire 1 "" ADR_I [19] $end
$var wire 1 #" ADR_I [18] $end
$var wire 1 $" ADR_I [17] $end
$var wire 1 %" ADR_I [16] $end
$var wire 1 &" ADR_I [15] $end
$var wire 1 '" ADR_I [14] $end
$var wire 1 (" ADR_I [13] $end
$var wire 1 )" ADR_I [12] $end
$var wire 1 *" ADR_I [11] $end
$var wire 1 +" ADR_I [10] $end
$var wire 1 ," ADR_I [9] $end
$var wire 1 -" ADR_I [8] $end
$var wire 1 ." ADR_I [7] $end
$var wire 1 /" ADR_I [6] $end
$var wire 1 0" ADR_I [5] $end
$var wire 1 1" ADR_I [4] $end
$var wire 1 2" ADR_I [3] $end
$var wire 1 3" ADR_I [2] $end
$var wire 1 4" ADR_I [1] $end
$var wire 1 5" ADR_I [0] $end
$var wire 1 %! DAT_I [31] $end
$var wire 1 &! DAT_I [30] $end
$var wire 1 '! DAT_I [29] $end
$var wire 1 (! DAT_I [28] $end
$var wire 1 )! DAT_I [27] $end
$var wire 1 *! DAT_I [26] $end
$var wire 1 +! DAT_I [25] $end
$var wire 1 ,! DAT_I [24] $end
$var wire 1 -! DAT_I [23] $end
$var wire 1 .! DAT_I [22] $end
$var wire 1 /! DAT_I [21] $end
$var wire 1 0! DAT_I [20] $end
$var wire 1 1! DAT_I [19] $end
$var wire 1 2! DAT_I [18] $end
$var wire 1 3! DAT_I [17] $end
$var wire 1 4! DAT_I [16] $end
$var wire 1 5! DAT_I [15] $end
$var wire 1 6! DAT_I [14] $end
$var wire 1 7! DAT_I [13] $end
$var wire 1 8! DAT_I [12] $end
$var wire 1 9! DAT_I [11] $end
$var wire 1 :! DAT_I [10] $end
$var wire 1 ;! DAT_I [9] $end
$var wire 1 <! DAT_I [8] $end
$var wire 1 =! DAT_I [7] $end
$var wire 1 >! DAT_I [6] $end
$var wire 1 ?! DAT_I [5] $end
$var wire 1 @! DAT_I [4] $end
$var wire 1 A! DAT_I [3] $end
$var wire 1 B! DAT_I [2] $end
$var wire 1 C! DAT_I [1] $end
$var wire 1 D! DAT_I [0] $end
$var reg 32 i, DAT_O [31:0] $end
$var wire 1 o! WE_I $end
$var wire 1 j, SEL_I [3] $end
$var wire 1 k, SEL_I [2] $end
$var wire 1 l, SEL_I [1] $end
$var wire 1 m, SEL_I [0] $end
$var wire 1 n, STB_I $end
$var wire 1 o, CYC_I $end
$var reg 1 p, ACK_O $end
$upscope $end

$scope module imem $end
$var wire 1 ; adr [5] $end
$var wire 1 < adr [4] $end
$var wire 1 = adr [3] $end
$var wire 1 > adr [2] $end
$var wire 1 ? adr [1] $end
$var wire 1 @ adr [0] $end
$var wire 1 C dout [31] $end
$var wire 1 D dout [30] $end
$var wire 1 E dout [29] $end
$var wire 1 F dout [28] $end
$var wire 1 G dout [27] $end
$var wire 1 H dout [26] $end
$var wire 1 I dout [25] $end
$var wire 1 J dout [24] $end
$var wire 1 K dout [23] $end
$var wire 1 L dout [22] $end
$var wire 1 M dout [21] $end
$var wire 1 N dout [20] $end
$var wire 1 O dout [19] $end
$var wire 1 P dout [18] $end
$var wire 1 Q dout [17] $end
$var wire 1 R dout [16] $end
$var wire 1 S dout [15] $end
$var wire 1 T dout [14] $end
$var wire 1 U dout [13] $end
$var wire 1 V dout [12] $end
$var wire 1 W dout [11] $end
$var wire 1 X dout [10] $end
$var wire 1 Y dout [9] $end
$var wire 1 Z dout [8] $end
$var wire 1 [ dout [7] $end
$var wire 1 \ dout [6] $end
$var wire 1 ] dout [5] $end
$var wire 1 ^ dout [4] $end
$var wire 1 _ dout [3] $end
$var wire 1 ` dout [2] $end
$var wire 1 a dout [1] $end
$var wire 1 b dout [0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
x="
x>"
x?"
x@"
xA"
bx B"
bx C"
xD"
xE"
bx 4,
bx 7,
bx 8,
x:,
x;,
x<,
x=,
x>,
bx ?,
bx @,
xA,
xB,
xD,
xE,
xF,
xG,
xH,
xI,
xJ,
xK,
xL,
xM,
bx N,
bx O,
bx P,
bx Q,
bx R,
bx S,
bx T,
bx U,
bx V,
bx W,
bx X,
bx Y,
xZ,
x[,
x\,
x],
x^,
bx _,
bx `,
bx a,
bx b,
xc,
xd,
xe,
bx f,
bx g,
bx h,
bx i,
0p,
b100000 3,
b100000 C,
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xe!
xh!
xi!
xj!
xk!
xl!
xm!
xn!
xo!
xs!
xr!
xq!
xp!
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
z9"
z8"
z7"
z6"
z:"
z;"
0<"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xh#
xi#
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
xR%
xQ%
xP%
xO%
xN%
xW%
xV%
xU%
xT%
xS%
x\%
x[%
xZ%
xY%
xX%
x]%
x^%
z_%
x`%
xa%
xb%
xc%
xg%
xf%
xe%
xd%
xh%
xi%
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
xT(
xS(
xR(
xQ(
xP(
xY(
xX(
xW(
xV(
xU(
x^(
x](
x\(
x[(
xZ(
xc(
xb(
xa(
x`(
x_(
xh(
xg(
xf(
xe(
xd(
xi(
xj(
xk(
xl(
xm(
xn(
xo(
xp(
xt(
xs(
xr(
xq(
xv(
xu(
xx(
xw(
x:)
x9)
x8)
x7)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
x()
x')
x&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
x<)
x;)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xA*
x@*
x?*
x>*
x=*
xB*
xC*
xD*
xE*
xF*
xf*
xe*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
xJ*
xI*
xH*
xG*
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
xu*
xt*
xs*
xr*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
xg*
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
xM+
xL+
xK+
xJ+
xI+
xN+
xO+
xP+
0p+
0o+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
02,
01,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
1g!
0f!
xo,
xn,
1m,
1l,
1k,
1j,
09,
x6,
x5,
$end
#50000
1!
1f!
b0 C,
b1 C,
b10 C,
b11 C,
b100 C,
b101 C,
b110 C,
b111 C,
b1000 C,
b1001 C,
b1010 C,
b1011 C,
b1100 C,
b1101 C,
b1110 C,
b1111 C,
b10000 C,
b10001 C,
b10010 C,
b10011 C,
b10100 C,
b10101 C,
b10110 C,
b10111 C,
b11000 C,
b11001 C,
b11010 C,
b11011 C,
b11100 C,
b11101 C,
b11110 C,
b11111 C,
b100000 C,
b0 4,
b0 7,
b0 8,
0G,
0H,
0I,
0J,
0K,
0L,
0M,
b0 N,
b0 O,
b0 P,
b0 Q,
b0 R,
b0 S,
b0 T,
b0 U,
b0 V,
0[,
0\,
0],
0^,
b0 _,
b0 `,
b0 a,
b0 b,
0c,
0d,
0e,
b0 f,
b0 g,
b0 h,
0i(
0k(
0l(
0m(
0n(
0o(
0C*
0D*
0E*
0F*
0O+
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
0V*
0U*
0T*
0S*
0R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
0T)
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
0^(
0](
0\(
0[(
0Z(
0-'
0,'
0+'
0*'
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0e!
0P+
0o!
0n!
0o,
0n,
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0G#
0F#
1E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
0{+
0z+
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0:)
09)
08)
07)
06)
05)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0&)
0%)
0$)
0#)
0")
0!)
0~(
0}(
0|(
0{(
0z(
0y(
0T+
0S+
0R+
0Q+
0'#
0&#
0i"
0h"
0g"
0f"
0j(
0B*
0N+
0b
1a
0`
1_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
1O
0N
0M
0L
0K
0J
0I
0H
0G
0F
1E
0D
0C
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0M+
0L+
0K+
0J+
0I+
0A*
0@*
0?*
0>*
0=*
0c(
0b(
0a(
0`(
0_(
0Y(
0X(
0W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0t(
0s(
0r(
0q(
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0\%
0[%
0Z%
0Y%
0X%
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
0W+
0V+
0U+
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0h(
0g(
0f(
0e(
0d(
0g#
1f#
0e#
1d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
1T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
1J#
0I#
0H#
0b%
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0R%
0Q%
0P%
0O%
0N%
0W%
0V%
0U%
0T%
0S%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
b0 @,
b0 ?,
0B,
b11000000 @,
b101 ?,
0>,
0:,
0A,
0;,
1<,
1=,
b0 Y,
1Z,
b0 C"
b0 B"
0E"
b10100000 C"
0A"
0="
0D"
1>"
0?"
1@"
b0 W,
b0 X,
0D,
1E,
1F,
0c%
0^%
0`%
1a%
1]%
1p(
0k!
0l!
0m!
1j!
0h!
1i!
0x(
0w(
0v(
0u(
0s!
0r!
0q!
0p!
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
1g%
0f%
1e%
0d%
0h%
1h#
1i#
05,
0i%
06,
1%#
#100000
0"
0!
0g!
0f!
#150000
1!
1f!
b100 4,
b100 7,
b100000000010000000000000001010 8,
1G,
zI,
1K,
b101 N,
1c,
bx f,
1i(
zk(
1m(
1F*
xf*
xe*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
xJ*
xI*
xH*
xG*
1)$
1c"
1e!
1@
0E#
1D#
0%#
1$#
1b
0a
1`
0_
1R
1t(
1r(
1J$
1H$
18$
1.$
1m+
1k+
1[+
1L%
1J%
1g#
0f#
1e#
0d#
1W#
1T%
b0 @,
b0 ?,
b10100000 @,
1;,
0<,
b0 C"
b10100000 C"
0g%
0e%
1`%
0a%
#200000
0!
0f!
#250000
1!
1f!
b1000 4,
b1000 7,
b100000000010010000000000000101 8,
1J,
0K,
b0 N,
b100 O,
b1010 R,
b1000 T,
1[,
z],
1l(
0m(
1,'
1*'
1)&
0)$
1($
0c"
1b"
zD*
zo!
xo,
xn,
0@
1?
1E#
18)
1/,
1-,
17)
15)
1%#
1B*
0b
1a
0`
1]
1W
1T
0R
1M
1J
0E
1.(
1,(
1V(
0t(
0r(
1K$
0J$
1I$
0H$
1;$
1n+
0m+
1l+
0k+
1^+
1M%
0L%
1K%
0J%
1e(
0g#
1f#
0e#
1b#
1\#
1Y#
0W#
1R#
1O#
0J#
1W%
b0 @,
b10100000 @,
b1010 Y,
0Z,
b0 C"
b11000000 C"
b1 B"
0>"
1?"
0p(
1s!
1L'
1J'
0j!
1h!
#300000
0!
0f!
#350000
1!
1f!
b1100 4,
b1100 7,
b1001010000100100000100010 8,
b1000 O,
b101 R,
b1001 T,
b101100 _,
b1010 `,
b1000 b,
0c,
1d,
1y)
1w)
1X)
1W)
1U)
1-'
0,'
1+'
0*'
0)&
1(&
1)$
1c"
0F*
0e!
1@
0E#
0D#
1C#
08)
07)
16)
10,
0/,
1.,
0-,
14"
12"
1c!
1a!
18)
17)
05)
0%#
0$#
1##
1N+
0a
0]
0W
0T
0M
0J
1H
1G
1E
1C
1/(
0.(
1-(
0,(
1>*
1Y(
0K$
1J$
0I$
1F$
1@$
1=$
0;$
16$
13$
0.$
1\%
1Y%
0n+
1m+
0l+
1i+
1c+
1`+
0^+
1Y+
1V+
0M%
1L%
0K%
1H%
1B%
1?%
1h(
0f#
0b#
0\#
0Y#
0R#
0O#
1M#
1L#
1J#
1H#
1R%
1O%
0W%
b0 @,
b11000000 @,
b1 ?,
0;,
1<,
b101 Y,
b0 C"
b0 B"
b101000 C"
1E"
1>"
0?"
0@"
0`%
1a%
0s!
1M'
0L'
1K'
0J'
1g%
1j!
0h!
0i!
#400000
0!
0f!
#450000
1!
1f!
b10000 4,
b10000 7,
b10101100000010000000000000000000 8,
0J,
1K,
b1 N,
b1100 O,
b100100000100010 R,
b1001 S,
b1000 T,
b1001 U,
b11100 _,
b101 `,
b1001 b,
b1010 g,
b1000 h,
0l(
1m(
1'+
1%+
1z)
0y)
1x)
0w)
1V)
0U)
1^(
1[(
0-'
1,'
0+'
1('
1"'
1}&
1)&
0)$
0($
1'$
0c"
0b"
1a"
0@
0?
1>
1E#
08)
07)
06)
15)
00,
1/,
0.,
1+,
1%,
1",
15"
04"
13"
02"
1d!
0c!
1b!
0a!
1G+
1E+
18)
16)
05)
13)
1-)
1*)
1%#
1R
1Q
0E
0/(
0-(
1J+
1A*
0Y(
1T(
1Q(
1t(
0J$
0F$
0@$
0=$
06$
03$
11$
10$
1.$
1,$
0\%
0Y%
0m+
0i+
0c+
0`+
0Y+
0V+
0L%
0H%
0B%
0?%
1W#
1V#
0J#
0R%
0O%
b0 @,
b0 ?,
b101000 @,
1B,
1;,
0<,
0=,
b10 W,
b1 X,
b0 Y,
1Z,
b0 C"
0E"
b10100100 C"
1="
1@"
1`%
0a%
0]%
0M'
0K'
1x(
1u(
0g%
1p(
1l!
1i!
1N(
1L(
1.(
1,(
1m'
1k'
b11111111111111111111111111111011 Y,
0Z,
1M'
1L'
1J'
1I'
1H'
1G'
1F'
1E'
1D'
1C'
1B'
1A'
1@'
1?'
1>'
1='
1<'
1;'
1:'
19'
18'
17'
16'
15'
14'
13'
12'
11'
10'
1/'
1.'
0p(
#500000
0!
0f!
#550000
1!
1f!
1,%
1*%
b10100 4,
b10100 7,
b10001100000010110000000000000000 8,
0G,
1J,
0K,
b0 N,
b10000 O,
b0 R,
b0 S,
b0 U,
b10010000010010100 _,
b11111111111111111111111111111011 `,
b1010 a,
b101 g,
b1001 h,
0i(
1l(
0m(
1(+
0'+
1&+
0%+
1;*
19*
1y)
0x)
1w)
1v)
1u)
1t)
1s)
1r)
1q)
1p)
1o)
1n)
1m)
1l)
1k)
1j)
1i)
1h)
1g)
1f)
1e)
1d)
1c)
1b)
1a)
1`)
1_)
1^)
1])
1\)
1[)
0W)
1S)
1M)
1J)
0^(
0[(
0,'
0('
0"'
0}&
0)&
0(&
1'&
1)$
1c"
1@
0E#
1D#
08)
17)
0/,
0+,
0%,
0",
14"
03"
12"
11"
10"
1/"
1."
1-"
1,"
1+"
1*"
1)"
1("
1'"
1&"
1%"
1$"
1#"
1""
1!"
1~!
1}!
1|!
1{!
1z!
1y!
1x!
1w!
1v!
1u!
1t!
1c!
0b!
1a!
1`!
1_!
1^!
1]!
1\!
1[!
1Z!
1Y!
1X!
1W!
1V!
1U!
1T!
1S!
1R!
1Q!
1P!
1O!
1N!
1M!
1L!
1K!
1J!
1I!
1H!
1G!
1F!
1E!
1C!
1A!
1H+
0G+
1F+
0E+
0h(
1O(
0N(
1M(
0L(
07)
03)
0-)
0*)
0%#
1$#
1b
1`
1J
0H
0G
1F
0C
1l'
0k'
1j'
1i'
1h'
1g'
1f'
1e'
1d'
1c'
1b'
1a'
1`'
1_'
1^'
1]'
1\'
1['
1Z'
1Y'
1X'
1W'
1V'
1U'
1T'
1S'
1R'
1Q'
1P'
1O'
1N'
0.(
0,(
1M+
0T(
0Q(
0t(
1;$
1:$
0.$
1^+
1]+
1g#
1e#
1O#
0M#
0L#
1K#
0H#
1W%
1V%
0,%
0*%
b0 @,
0B,
b10100100 @,
1:,
1=,
b0 W,
b0 X,
b0 C"
b10000 C"
b1 B"
0="
1D"
0>"
0@"
1^%
1]%
1s!
0x(
0u(
0l!
0j!
0i!
0O(
0M(
0m'
0l'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
b0 Y,
1Z,
0M'
0L'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
1p(
#600000
0!
0f!
#650000
1!
1f!
b11000 4,
b11000 7,
b10001000010110000000000000101 8,
1G,
1H,
b10100 O,
b1011 T,
0[,
b10000 _,
b0 `,
b0 a,
b1000 b,
1c,
b11111111111111111111111111111011 g,
1i(
1F*
1'+
0&+
1%+
1$+
1#+
1"+
1!+
1~*
1}*
1|*
1{*
1z*
1y*
1x*
1w*
1v*
1u*
1t*
1s*
1r*
1q*
1p*
1o*
1n*
1m*
1l*
1k*
1j*
1i*
1h*
1g*
0;*
09*
0z)
0y)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0X)
0S)
0M)
0J)
1)&
0)$
1($
0c"
1b"
1e!
0@
1?
1E#
18)
05"
04"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0d!
0c!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0C!
0A!
1G+
0F+
1E+
1D+
1C+
1B+
1A+
1@+
1?+
1>+
1=+
1<+
1;+
1:+
19+
18+
17+
16+
15+
14+
13+
12+
11+
10+
1/+
1.+
1-+
1,+
1++
1*+
1)+
xm!
1%#
1j(
0B*
0`
0R
0J
0F
1E
0A*
1Y(
1X(
1K$
1I$
13$
01$
00$
1/$
0,$
0m!
1n+
1l+
1V+
1M%
1K%
1h(
1g(
0e#
0W#
0O#
0K#
1J#
1b%
1O%
1j$
1h$
b0 @,
b10000 @,
b1 ?,
0:,
1A,
0;,
0=,
b0 C"
b0 B"
b10100000 C"
0D"
1>"
1@"
1D,
0E,
0F,
0^%
0`%
0]%
0s!
1g%
1j!
1i!
1h%
0h#
0i#
15,
1i%
#700000
0!
0f!
#750000
1!
1f!
b11100 4,
0G,
0H,
0I,
0J,
b0 O,
b0 T,
1[,
1\,
b10100 _,
b1011 b,
0d,
b0 g,
b1000 h,
0i(
0k(
0l(
1C*
0(+
0'+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
0g*
1X)
0)&
0'&
1c"
1n!
1o,
1n,
1@
0E#
0D#
0C#
1B#
08)
06)
0H+
0G+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
0%#
0$#
0##
1"#
0j(
1B*
0N+
1a
1R
1L
1J
1H
1F
0E
0M+
1A*
1@*
0Y(
0X(
0V(
0h(
0g(
0e(
1f#
1W#
1Q#
1O#
1M#
1K#
0J#
b0 C"
b10001 C"
b1 B"
1D"
0>"
0@"
0D,
1E,
1F,
1s!
0j!
0i!
0h%
1h#
1i#
05,
0i%
#800000
0!
0f!
#850000
1!
1f!
b100000 4,
b100000 7,
b10101010010110000000000000011 8,
zI,
1L,
b1 N,
b11000 O,
b1010 P,
b101 R,
b1000 S,
b1011 T,
0[,
0\,
0],
b0 _,
b0 b,
1d,
1e,
b1011 h,
1p,
zk(
1n(
0C*
0D*
0X)
0V)
1-'
1+'
1J&
1H&
1(&
1'&
0($
0'$
1&$
0c"
0b"
0a"
1`"
1O+
1<"
0o!
0n!
0o,
0n,
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
0@
0?
0>
1=
1E#
17)
16)
10,
1.,
18)
06)
15)
1%#
0B*
1N+
0b
0L
0J
0H
0F
1E
1l'
1j'
1M+
1L+
0A*
0@*
0>*
1Y(
1X(
1V(
1Q(
1t(
1J$
0I$
15$
11$
1m+
0l+
1X+
1L%
0K%
1h(
1g(
1e(
0g#
0Q#
0O#
0M#
0K#
1J#
xm!
1Q%
0j$
0h$
b0 @,
b0 ?,
b10001 @,
b1 ?,
b1010 Y,
0Z,
b0 C"
b0 B"
b10100000 C"
0D"
1>"
1@"
b1 X,
0p(
1j!
1i!
1x(
0s!
1L'
1J'
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
bx Y,
xZ,
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
xp(
#900000
0!
0f!
#950000
1!
1f!
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
b100100 4,
b100100 7,
b100000000010110000000000000010 8,
b100000 O,
b0 P,
b11 R,
b1010 S,
z],
1^,
b101100 _,
bx `,
bx a,
b1011 b,
xc,
0d,
0e,
b0 h,
0p,
zD*
1E*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
1X)
1W)
1U)
1,'
0+'
0J&
0H&
0(&
0'&
1&&
1)$
1c"
xF*
0O+
0<"
xe!
xP+
zo!
xo,
xn,
x6,
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
1@
0E#
1D#
07)
16)
1/,
0.,
x$#
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
17)
06)
x%#
1$#
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0N+
0a
1`
1Z
1Y
1X
1W
1V
1U
1T
0R
0Q
1H
1G
1C
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0p'
0o'
0n'
0l'
0j'
0M+
0L+
0J+
1A*
1@*
1>*
1S(
0K$
05$
03$
01$
0/$
1.$
0n+
0X+
0V+
0M%
0f#
1e#
1_#
1^#
1]#
1\#
1[#
1Z#
1Y#
0W#
0V#
1M#
1L#
1H#
0b%
0Q%
0O%
b0 @,
b0 ?,
b10100000 @,
0A,
1;,
1=,
b0 Y,
1Z,
b0 C"
b101000 C"
1E"
0@"
b0 X,
0m!
1`%
1]%
1p(
0i!
0x(
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0g%
#1000000
0!
0f!
#1050000
1!
1f!
b101x00 4,
b101000 7,
b10101100000010000111111100000100 8,
1G,
1J,
0L,
b0 N,
b100100 O,
bx Q,
b10 R,
b0 S,
b0 `,
b0 a,
1c,
bx g,
b1011 h,
1i(
1l(
0n(
1F*
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
xu*
xt*
xs*
xr*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
xg*
0<*
0;*
0:*
09*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
0])
0\)
0[)
0-'
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
1)&
0)$
1($
xc"
1b"
1P+
1e!
16,
1%#
x@
1?
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
08)
07)
16)
00,
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
18)
17)
06)
xT+
xS+
xR+
xQ+
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
1.(
1M+
1L+
1J+
0S(
0Q(
0t(
0J$
1I$
1C$
1B$
1A$
1@$
1?$
1>$
1=$
0;$
0:$
11$
10$
1,$
1\%
1[%
1Z%
1Y%
0m+
1l+
1f+
1e+
1d+
1c+
1b+
1a+
1`+
0^+
0]+
0L%
1K%
1E%
1D%
1C%
1B%
1A%
1@%
1?%
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
0W%
0V%
0-%
1,%
0+%
1*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
b0 @,
b101000 @,
1B,
0=,
b10 Y,
0Z,
b0 C"
0E"
0>"
0]%
1L'
0p(
0j!
#1100000
0!
0f!
#1150000
1!
1f!
b101100 4,
b0 7,
b0 8,
0G,
b101000 O,
b1010 Q,
b111111100000100 R,
b1000 T,
b1111 U,
b11100 V,
1[,
0^,
b10 `,
bx a,
0c,
b0 g,
0i(
0E*
0F*
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
0i*
0h*
0g*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
1y)
1^(
1](
1\(
1[(
0,'
1+'
1%'
1$'
1#'
1"'
1!'
1~&
1}&
0k&
1j&
0i&
1h&
0g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0)&
1(&
0($
0&$
1c"
0e!
0P+
06,
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
1@
0G#
0F#
0E#
0D#
1C#
1B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
08)
07)
16)
0/,
1.,
1(,
1',
1&,
1%,
1$,
1#,
1",
0O(
1N(
0M(
1L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
14"
1c!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0++
0*+
0)+
17)
10)
1/)
1.)
1-)
1,)
1+)
1*)
0T+
0S+
0R+
0Q+
0'#
0&#
0%#
0$#
1##
1"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
1B*
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0.(
1-(
1'(
1&(
1%(
1$(
1#(
1"(
1!(
1a(
1`(
1_(
0Y(
0X(
0I$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
08$
01$
00$
0.$
0,$
0\%
0[%
0Z%
0Y%
0l+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0[+
0K%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0h(
0g(
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0T%
0,%
0*%
b0 @,
0B,
b11000000 @,
b101 ?,
0;,
1<,
1=,
b111111100000100 Y,
b11000000 C"
b101 B"
1?"
1@"
0`%
1a%
1]%
1s!
1q!
0L'
1K'
1E'
1D'
1C'
1B'
1A'
1@'
1?'
1g%
1e%
1h!
1i!
#1200000
0!
0f!
#1250000
1!
1f!
b110000 4,
b110000 7,
1G,
0J,
1K,
b101 N,
b0 O,
b0 Q,
b0 R,
b0 T,
b0 U,
b0 V,
0[,
b11111110000111000 _,
b111111100000100 `,
b1010 a,
b1000 b,
1d,
b10 g,
1i(
0l(
1m(
1'+
0<*
1;*
0:*
19*
08*
07*
06*
05*
04*
03*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
0**
0)*
0(*
0'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0y)
1x)
1r)
1q)
1p)
1o)
1n)
1m)
1l)
0X)
1V)
1P)
1O)
1N)
1M)
1L)
1K)
1J)
0^(
0](
0\(
0[(
0+'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0j&
0h&
0(&
0&&
1'$
1&$
0c"
0b"
1a"
0@
0?
1>
1E#
07)
05)
0.,
0(,
0',
0&,
0%,
0$,
0#,
0",
0N(
0L(
04"
13"
1-"
1,"
1+"
1*"
1)"
1("
1'"
0c!
1b!
1\!
1[!
1Z!
1Y!
1X!
1W!
1V!
0D!
1C!
0B!
1A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
1G+
0e(
06)
00)
0/)
0.)
0-)
0,)
0+)
0*)
1%#
0B*
1N+
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
0-(
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0A*
0@*
0a(
0`(
0_(
0V(
1t(
1r(
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
b0 Y,
1Z,
b0 C"
b0 B"
0?"
0@"
1p(
0s!
0q!
0K'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0h!
0i!
#1300000
0!
0f!
#1350000
1!
1f!
b110100 4,
b110100 7,
bx 8,
b110000 O,
1[,
b0 _,
b0 `,
b0 a,
b0 b,
1c,
0d,
b111111100000100 g,
b1000 h,
1F*
0'+
1&+
1~*
1}*
1|*
1{*
1z*
1y*
1x*
0;*
09*
0x)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0W)
0V)
0U)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
1'&
1&&
1)$
1c"
1e!
1@
0E#
1D#
16)
15)
03"
0-"
0,"
0+"
0*"
0)"
0("
0'"
0b!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0C!
0A!
0G+
1F+
1@+
1?+
1>+
1=+
1<+
1;+
1:+
0%#
1$#
1B*
0N+
0M+
0L+
0>*
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x\%
x[%
xZ%
xY%
xX%
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
xb%
xR%
xQ%
xP%
xO%
xN%
xW%
xV%
xU%
xT%
xS%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
b0 @,
b0 ?,
0<,
0=,
0g%
0e%
0a%
0]%
#1400000
0!
0f!
#1450000
1!
1f!
b111000 4,
b111000 7,
0G,
0K,
xL,
b0 N,
b110100 O,
bx P,
bx Q,
bx R,
bx S,
bx T,
bx U,
bx V,
b110000 _,
1d,
b0 g,
b0 h,
0i(
0m(
xn(
0&+
0~*
0}*
0|*
0{*
0z*
0y*
0x*
1V)
1U)
x^(
x](
x\(
x[(
xZ(
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
1)&
0)$
1($
0c"
1b"
0@
1?
1E#
18)
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
0F+
0@+
0?+
0>+
0=+
0<+
0;+
0:+
x:)
x9)
x8)
x7)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
x()
x')
x&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
1%#
1N+
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
0J+
xc(
xb(
xa(
x`(
x_(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
0t(
0r(
xh(
xg(
xf(
xe(
xd(
bx Y,
xZ,
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
xp(
#1500000
0!
0f!
#1550000
1!
1f!
b111100 4,
b111100 7,
b111000 O,
0[,
x^,
bx _,
bx `,
bx a,
bx b,
xc,
xE*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
x-*
x,*
x+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
xn)
xm)
xl)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
x<)
x;)
0)&
1(&
1)$
1c"
xF*
xe!
xP+
x6,
1@
0E#
0D#
0C#
0B#
1A#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
0B*
xA*
x@*
x?*
x>*
x=*
#1600000
0!
0f!
#1650000
1!
1f!
bx 4,
b1000000 7,
b111100 O,
0d,
bx g,
bx h,
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
xu*
xt*
xs*
xr*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
xg*
1)&
0)$
0($
0'$
0&$
1%$
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
xT+
xS+
xR+
xQ+
0N+
xM+
xL+
xK+
xJ+
xI+
#1700000
0!
0f!
#1750000
1!
1f!
bx 7,
b1000000 O,
0)&
0(&
0'&
0&&
1%&
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
#1800000
0!
0f!
#1850000
1!
1f!
bx O,
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
#1900000
0!
0f!
#1950000
1!
1f!
#2000000
0!
0f!
#2050000
1!
1f!
#2100000
0!
0f!
#2150000
1!
1f!
#2200000
0!
0f!
#2250000
1!
1f!
#2300000
0!
0f!
#2350000
1!
1f!
#2400000
0!
0f!
#2450000
1!
1f!
#2500000
0!
0f!
#2550000
1!
1f!
#2600000
0!
0f!
#2650000
1!
1f!
#2700000
0!
0f!
#2750000
1!
1f!
#2800000
0!
0f!
#2850000
1!
1f!
#2900000
0!
0f!
#2950000
1!
1f!
#3000000
0!
0f!
#3050000
1!
1f!
#3100000
0!
0f!
#3150000
1!
1f!
#3200000
0!
0f!
#3250000
1!
1f!
#3300000
0!
0f!
#3350000
1!
1f!
#3400000
0!
0f!
#3450000
1!
1f!
#3500000
0!
0f!
#3550000
1!
1f!
#3600000
0!
0f!
#3650000
1!
1f!
#3700000
0!
0f!
#3750000
1!
1f!
#3800000
0!
0f!
#3850000
1!
1f!
#3900000
0!
0f!
#3950000
1!
1f!
#4000000
0!
0f!
#4050000
1!
1f!
#4100000
0!
0f!
#4150000
1!
1f!
#4200000
0!
0f!
#4250000
1!
1f!
#4300000
0!
0f!
#4350000
1!
1f!
#4400000
0!
0f!
#4450000
1!
1f!
#4500000
0!
0f!
#4550000
1!
1f!
#4600000
0!
0f!
#4650000
1!
1f!
#4700000
0!
0f!
#4750000
1!
1f!
#4800000
0!
0f!
#4850000
1!
1f!
#4900000
0!
0f!
#4950000
1!
1f!
#5000000
0!
0f!
#5050000
1!
1f!
#5100000
0!
0f!
#5150000
1!
1f!
#5200000
0!
0f!
#5250000
1!
1f!
#5300000
0!
0f!
#5350000
1!
1f!
#5400000
0!
0f!
#5450000
1!
1f!
#5500000
0!
0f!
#5550000
1!
1f!
#5600000
0!
0f!
#5650000
1!
1f!
#5700000
0!
0f!
#5750000
1!
1f!
#5800000
0!
0f!
#5850000
1!
1f!
#5900000
0!
0f!
#5950000
1!
1f!
#6000000
0!
0f!
#6050000
1!
1f!
#6100000
0!
0f!
#6150000
1!
1f!
#6200000
0!
0f!
#6250000
1!
1f!
#6300000
0!
0f!
#6350000
1!
1f!
#6400000
0!
0f!
#6450000
1!
1f!
#6500000
0!
0f!
#6550000
1!
1f!
#6600000
0!
0f!
#6650000
1!
1f!
#6700000
0!
0f!
#6750000
1!
1f!
#6800000
0!
0f!
#6850000
1!
1f!
#6900000
0!
0f!
#6950000
1!
1f!
#7000000
0!
0f!
#7050000
1!
1f!
#7100000
0!
0f!
#7150000
1!
1f!
#7200000
0!
0f!
#7250000
1!
1f!
#7300000
0!
0f!
#7350000
1!
1f!
#7400000
0!
0f!
#7450000
1!
1f!
#7500000
0!
0f!
#7550000
1!
1f!
#7600000
0!
0f!
#7650000
1!
1f!
#7700000
0!
0f!
#7750000
1!
1f!
#7800000
0!
0f!
#7850000
1!
1f!
#7900000
0!
0f!
#7950000
1!
1f!
#8000000
0!
0f!
#8050000
1!
1f!
#8100000
0!
0f!
#8150000
1!
1f!
#8200000
0!
0f!
#8250000
1!
1f!
#8300000
0!
0f!
#8350000
1!
1f!
#8400000
0!
0f!
#8450000
1!
1f!
#8500000
0!
0f!
#8550000
1!
1f!
#8600000
0!
0f!
#8650000
1!
1f!
#8700000
0!
0f!
#8750000
1!
1f!
#8800000
0!
0f!
#8850000
1!
1f!
#8900000
0!
0f!
#8950000
1!
1f!
#9000000
0!
0f!
#9050000
1!
1f!
#9100000
0!
0f!
#9150000
1!
1f!
#9200000
0!
0f!
#9250000
1!
1f!
#9300000
0!
0f!
#9350000
1!
1f!
#9400000
0!
0f!
#9450000
1!
1f!
#9500000
0!
0f!
#9550000
1!
1f!
#9600000
0!
0f!
#9650000
1!
1f!
#9700000
0!
0f!
#9750000
1!
1f!
#9800000
0!
0f!
#9850000
1!
1f!
#9900000
0!
0f!
#9950000
1!
1f!
#10000000
0!
0f!
#10050000
1!
1f!
